name: mc
inputs:
  route:
    map:
      type: string

  error:
    source:
      type: string
    message:
      type: string

  hello:
    id:
      type: string
      description: The requested ID
    if:
      type: any
      description: The program's interface
    ports:
      type: list
      values:
        type: string

  alive:

  doc:
    description: Print out the documentation for a given node, a specific function, or a specific argument/return value for a function
    node:
      type: string
    function:
      type: string
      optional: true

  nodes:
    nodes:
      type: list
      values:
        type: dict
        values:
          node:
            type: string
          id:
            type: string

  launch:
    description: launch a new node with the specified ID
    node:
      type: string
    id:
      type: string
      optional: true
    env:
      type: string
      optional: true
      description: JSON string giving environment vars to add

  types:

  routes:
    src_node:
      type: string
      optional: true
    src_port:
      type: string
      optional: true
    dest_node:
      type: string
      optional: true
    dest_port:
      type: string
      optional: true

  ports:
    node:
      type: string

  delroute:
    src_node:
      type: string
    src_port:
      type: string
    dest_node:
      type: string
    dest_port:
      type: string

outputs:
  success:
    success:
      type: bool
  reg:
    id:
      type: string
      description: The requested ID, or, if that was unavailable, [id].[n] for the minimum positive integer n that makes it unique
  types:
    types:
      type: list
      values:
        type: string
  routes:
    routes:
      type: list
      values:
        type: string
  ports:
    type: list
    values:
      type: string
  mc_error:
    message:
      type: string
  heartbeat: