// Code generated by goyacc -o src/mc/router/parser.go -v y src/mc/router/parser.go.y. DO NOT EDIT.

//line src/mc/router/parser.go.y:2
package router

import __yyfmt__ "fmt"

//line src/mc/router/parser.go.y:2
import (
	"fmt"
	"strconv"
)

type Token struct {
	token    int
	literal  string
	position Position
}
type RouteList struct {
	Routes []*Route
}
type Script struct {
	Statements []*Statement
}
type Statement struct {
	Operation string
	Args      []*Value
}

//line src/mc/router/parser.go.y:23
type yySymType struct {
	yys        int
	token      Token
	routes     []*Route
	transforms *Route
	transform  *Transform
	expression *Expression
	script     []*Statement
	statement  *Statement
	node       *Node
}

const IDENT = 57346
const VAR = 57347
const NAME = 57348
const NUMBER = 57349
const STRING = 57350
const NOT = 57351
const AND = 57352
const OR = 57353
const IS = 57354
const EQ = 57355
const UNARY = 57356
const GE = 57357
const LE = 57358

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"VAR",
	"NAME",
	"NUMBER",
	"STRING",
	"NOT",
	"AND",
	"OR",
	"IS",
	"EQ",
	"'?'",
	"'%'",
	"'='",
	"'{'",
	"'}'",
	"'<'",
	"'>'",
	"':'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"UNARY",
	"GE",
	"LE",
	"';'",
	"'('",
	"')'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line src/mc/router/parser.go.y:239

func (v *Value) ToString() string {
	return v.Type
}
func Parse(exp string) []*Route {
	l := new(RouteLexer)
	l.s = new(RouteScanner)
	l.s.Init(exp)
	//l.Init(strings.NewReader(exp))
	yyParse(l)
	return l.result
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 162

var yyAct = [...]int{

	29, 49, 27, 38, 23, 37, 3, 22, 24, 42,
	41, 14, 33, 34, 35, 36, 21, 39, 40, 45,
	17, 60, 13, 25, 5, 4, 43, 44, 16, 15,
	26, 46, 48, 7, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 31, 38, 3, 37, 20, 61,
	62, 42, 41, 28, 33, 34, 35, 36, 8, 39,
	40, 63, 38, 1, 37, 0, 0, 0, 42, 41,
	0, 33, 34, 35, 36, 0, 39, 40, 47, 38,
	0, 37, 0, 0, 64, 42, 41, 0, 33, 34,
	35, 36, 0, 39, 40, 38, 0, 37, 0, 0,
	32, 42, 41, 0, 33, 34, 35, 36, 0, 39,
	40, 38, 30, 37, 0, 22, 24, 42, 41, 0,
	33, 34, 35, 36, 0, 39, 40, 0, 0, 0,
	38, 25, 37, 3, 0, 0, 42, 41, 26, 33,
	34, 35, 36, 9, 10, 11, 2, 0, 0, 0,
	0, 6, 12, 0, 0, 0, 0, 0, 0, 0,
	18, 19,
}
var yyPact = [...]int{

	42, -1000, 5, -1000, 129, 2, -1000, -1000, -9, 12,
	11, 3, -1000, 42, 129, 0, 108, 40, -1000, -1000,
	-1000, 82, -1000, -1000, -1000, 0, 0, 1, 108, 49,
	16, -20, -1000, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, -10, -1000, -1000, -1000, 0, 0,
	98, 98, 98, 98, 98, 98, 117, 117, 98, 98,
	-1000, 32, 66, -1000, -1000,
}
var yyPgo = [...]int{

	0, 63, 146, 33, 58, 2, 53, 0,
}
var yyR1 = [...]int{

	0, 1, 1, 1, 1, 2, 3, 3, 4, 4,
	4, 5, 5, 6, 6, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
}
var yyR2 = [...]int{

	0, 3, 3, 4, 3, 1, 3, 3, 4, 4,
	6, 1, 2, 2, 4, 1, 1, 1, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
}
var yyChk = [...]int{

	-1000, -1, -2, 4, 20, 19, -2, -3, -4, 14,
	15, 16, -2, 20, 20, 17, 17, 17, -2, -2,
	-3, -7, 7, 4, 8, 23, 30, -5, -6, -7,
	4, 4, 18, 22, 23, 24, 25, 15, 13, 27,
	28, 20, 19, -7, -7, 18, -5, 29, 16, 21,
	-7, -7, -7, -7, -7, -7, -7, -7, -7, -7,
	31, -7, -7, 29, 18,
}
var yyDef = [...]int{

	0, -2, 0, 5, 0, 0, 1, 4, 0, 0,
	0, 0, 2, 0, 0, 0, 0, 0, 3, 6,
	7, 0, 15, 16, 17, 0, 0, 0, 11, 0,
	16, 0, 8, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 18, 0, 9, 12, 13, 0, 0,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	19, 0, 0, 14, 10,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 15, 3, 3,
	30, 31, 24, 22, 3, 23, 3, 25, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 21, 29,
	19, 16, 20, 14, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 17, 3, 18,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 26, 27, 28,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:50
		{
			fmt.Println("C")
			yyVAL.routes = nil
			if l, ok := yylex.(*RouteLexer); ok {
				l.result = []*Route{&Route{Source: yyDollar[1].node.Name, Dest: yyDollar[3].node.Name}}
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:58
		{
			fmt.Println("B")
			yyVAL.routes = nil
			if l, ok := yylex.(*RouteLexer); ok {
				l.result = []*Route{&Route{Source: yyDollar[3].node.Name, Dest: yyDollar[1].node.Name}}
			}
		}
	case 3:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:66
		{
			yyVAL.routes = nil
			if l, ok := yylex.(*RouteLexer); ok {
				l.result = []*Route{
					&Route{Source: yyDollar[1].node.Name, Dest: yyDollar[4].node.Name},
					&Route{Source: yyDollar[4].node.Name, Dest: yyDollar[1].node.Name}}
			}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:75
		{
			yyVAL.routes = nil
			fmt.Println("A")
			if l, ok := yylex.(*RouteLexer); ok {
				l.result = []*Route{
					&Route{
						Source:     yyDollar[1].node.Name,
						Dest:       yyDollar[3].transforms.Dest,
						Transforms: yyDollar[3].transforms.Transforms}}
			}
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/mc/router/parser.go.y:88
		{
			fmt.Println("NODE", yyDollar[1].token.literal)
			yyVAL.node = &Node{Name: yyDollar[1].token.literal}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:94
		{
			yyVAL.transforms = &Route{
				Dest:       yyDollar[3].node.Name,
				Transforms: []*Transform{yyDollar[1].transform}}
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:100
		{
			yyVAL.transforms = &Route{
				Dest:       yyDollar[3].transforms.Dest,
				Transforms: append([]*Transform{yyDollar[1].transform}, yyDollar[3].transforms.Transforms...)}
		}
	case 8:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:107
		{
			yyVAL.transform = &Transform{
				Type:   "filter",
				Source: yyDollar[3].expression.ToString()}
		}
	case 9:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:113
		{
			yyVAL.transform = &Transform{
				Type: "map"}
		}
	case 10:
		yyDollar = yyS[yypt-6 : yypt+1]
//line src/mc/router/parser.go.y:118
		{
			yyVAL.transform = &Transform{
				Type:   "replace",
				Source: yyDollar[5].expression.ToString()}
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/mc/router/parser.go.y:126
		{
			yyVAL.script = []*Statement{yyDollar[1].statement}
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/mc/router/parser.go.y:130
		{
			yyVAL.script = append([]*Statement{yyDollar[1].statement}, yyDollar[2].script...)
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/mc/router/parser.go.y:135
		{
			yyVAL.statement = &Statement{
				Operation: "expr",
				Args: []*Value{
					&Value{Type: "expr", ExprVal: yyDollar[1].expression}}}
		}
	case 14:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:142
		{
			yyVAL.statement = &Statement{
				Operation: "assign",
				Args: []*Value{
					&Value{Type: "var", NameVal: yyDollar[1].token.literal},
					&Value{Type: "expr", ExprVal: yyDollar[3].expression}}}
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/mc/router/parser.go.y:150
		{
			x, _ := strconv.Atoi(yyDollar[1].token.literal)
			yyVAL.expression = &Expression{
				Operation: "val",
				Value:     &Value{Type: "int", IntVal: x}}
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/mc/router/parser.go.y:157
		{
			yyVAL.expression = &Expression{
				Operation: "val",
				Value:     &Value{Type: "var", NameVal: yyDollar[1].token.literal}}
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/mc/router/parser.go.y:163
		{
			yyVAL.expression = &Expression{
				Operation: "string",
				Value:     &Value{Type: "var", StringVal: yyDollar[1].token.literal}}
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/mc/router/parser.go.y:169
		{
			yyVAL.expression = &Expression{
				Operation: "-",
				Args:      []*Expression{yyDollar[2].expression}}
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:175
		{
			yyVAL.expression = yyDollar[2].expression
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:179
		{
			yyVAL.expression = &Expression{
				Operation: "+",
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:185
		{
			yyVAL.expression = &Expression{
				Operation: "-",
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:191
		{
			yyVAL.expression = &Expression{
				Operation: "*",
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:197
		{
			yyVAL.expression = &Expression{
				Operation: "/",
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:203
		{
			yyVAL.expression = &Expression{
				Operation: "%",
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:209
		{
			yyVAL.expression = &Expression{
				Operation: "==",
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:215
		{
			yyVAL.expression = &Expression{
				Operation: ">=",
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:221
		{
			yyVAL.expression = &Expression{
				Operation: "<=",
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:227
		{
			yyVAL.expression = &Expression{
				Operation: ">",
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:233
		{
			yyVAL.expression = &Expression{
				Operation: "<",
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	}
	goto yystack /* stack new state and value */
}
