// Code generated by goyacc -o src/mc/router/parser.go -v src/mc/router/parser.output src/mc/router/parser.go.y. DO NOT EDIT.

//line src/mc/router/parser.go.y:2
package router

import __yyfmt__ "fmt"

//line src/mc/router/parser.go.y:2
import (
	"strconv"
	//"fmt"
)

type Token struct {
	token    int
	literal  string
	position Position
}

//line src/mc/router/parser.go.y:13
type yySymType struct {
	yys        int
	token      Token
	routes     []*Route
	transforms *Route
	transform  *Transform
	expression *Expression
	statement  *Statement
	writeable  *WriteableValue
	script     []*Statement
	node       *Node
}

const IDENT = 57346
const VAR = 57347
const DEL = 57348
const NUMBER = 57349
const STRING = 57350
const THIS = 57351
const TRUE = 57352
const FALSE = 57353
const AND = 57354
const OR = 57355
const EQ = 57356
const NE = 57357
const LE = 57358
const GE = 57359
const PE = 57360
const ME = 57361
const TE = 57362
const DE = 57363
const RE = 57364
const AE = 57365
const OE = 57366
const XE = 57367
const SUB = 57368
const EXP = 57369
const UNARY = 57370

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"VAR",
	"DEL",
	"NUMBER",
	"STRING",
	"THIS",
	"TRUE",
	"FALSE",
	"AND",
	"OR",
	"EQ",
	"NE",
	"LE",
	"GE",
	"PE",
	"ME",
	"TE",
	"DE",
	"RE",
	"AE",
	"OE",
	"XE",
	"SUB",
	"EXP",
	"'?'",
	"'%'",
	"'='",
	"'{'",
	"'}'",
	"'['",
	"']'",
	"'<'",
	"'>'",
	"':'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'&'",
	"'|'",
	"'^'",
	"'!'",
	"'~'",
	"UNARY",
	"'.'",
	"';'",
	"'('",
	"')'",
	"','",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line src/mc/router/parser.go.y:462

func Parse(exp string) []*Route {
	l := new(RouteLexer)
	l.s = new(RouteScanner)
	l.s.Init(exp)
	//l.Init(strings.NewReader(exp))
	yyParse(l)
	return l.result
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 835

var yyAct = [...]int{

	68, 35, 42, 67, 137, 47, 69, 130, 47, 129,
	55, 65, 6, 65, 65, 133, 89, 114, 23, 48,
	49, 50, 51, 52, 53, 54, 64, 45, 64, 64,
	66, 16, 70, 71, 154, 72, 3, 153, 74, 5,
	4, 113, 88, 73, 132, 3, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 19, 112, 18, 14, 10,
	11, 12, 8, 116, 90, 91, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 17, 43, 2, 22,
	131, 128, 111, 7, 13, 87, 86, 60, 61, 56,
	57, 59, 58, 20, 3, 21, 40, 38, 39, 15,
	36, 41, 47, 46, 55, 33, 37, 9, 65, 136,
	63, 62, 1, 48, 49, 50, 51, 52, 53, 54,
	0, 45, 0, 64, 149, 151, 150, 148, 60, 61,
	56, 57, 59, 58, 0, 0, 0, 0, 0, 0,
	0, 152, 0, 47, 46, 55, 0, 0, 0, 65,
	0, 63, 62, 0, 48, 49, 50, 51, 52, 53,
	54, 0, 45, 0, 64, 0, 0, 0, 115, 60,
	61, 56, 57, 59, 58, 0, 79, 80, 81, 82,
	83, 76, 77, 78, 47, 46, 55, 0, 75, 0,
	65, 84, 63, 62, 0, 48, 49, 50, 51, 52,
	53, 54, 0, 45, 0, 64, 85, 0, 117, 60,
	61, 56, 57, 59, 58, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 47, 46, 55, 0, 0, 0,
	65, 0, 63, 62, 0, 48, 49, 50, 51, 52,
	53, 54, 0, 45, 0, 64, 146, 60, 61, 56,
	57, 59, 58, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 47, 46, 55, 0, 0, 0, 65, 0,
	63, 62, 0, 48, 49, 50, 51, 52, 53, 54,
	0, 45, 0, 64, 145, 60, 61, 56, 57, 59,
	58, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	47, 46, 55, 0, 0, 0, 65, 0, 63, 62,
	0, 48, 49, 50, 51, 52, 53, 54, 0, 45,
	0, 64, 144, 60, 61, 56, 57, 59, 58, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 47, 46,
	55, 0, 0, 0, 65, 0, 63, 62, 0, 48,
	49, 50, 51, 52, 53, 54, 0, 45, 0, 64,
	143, 60, 61, 56, 57, 59, 58, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 47, 46, 55, 0,
	0, 0, 65, 0, 63, 62, 0, 48, 49, 50,
	51, 52, 53, 54, 0, 45, 0, 64, 142, 60,
	61, 56, 57, 59, 58, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 47, 46, 55, 0, 0, 0,
	65, 0, 63, 62, 0, 48, 49, 50, 51, 52,
	53, 54, 0, 45, 0, 64, 141, 60, 61, 56,
	57, 59, 58, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 47, 46, 55, 0, 0, 0, 65, 0,
	63, 62, 0, 48, 49, 50, 51, 52, 53, 54,
	0, 45, 0, 64, 140, 60, 61, 56, 57, 59,
	58, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	47, 46, 55, 0, 0, 0, 65, 0, 63, 62,
	0, 48, 49, 50, 51, 52, 53, 54, 0, 45,
	0, 64, 139, 60, 61, 56, 57, 59, 58, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 47, 46,
	55, 0, 0, 0, 65, 0, 63, 62, 0, 48,
	49, 50, 51, 52, 53, 54, 0, 45, 0, 64,
	138, 60, 61, 56, 57, 59, 58, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 47, 46, 55, 0,
	0, 0, 65, 147, 63, 62, 0, 48, 49, 50,
	51, 52, 53, 54, 0, 45, 0, 64, 60, 61,
	56, 57, 59, 58, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 47, 46, 55, 0, 0, 0, 65,
	135, 63, 62, 0, 48, 49, 50, 51, 52, 53,
	54, 0, 45, 0, 64, 60, 61, 56, 57, 59,
	58, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	47, 46, 55, 0, 0, 0, 65, 0, 63, 62,
	134, 48, 49, 50, 51, 52, 53, 54, 0, 45,
	0, 64, 60, 61, 56, 57, 59, 58, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 47, 46, 55,
	0, 0, 44, 65, 0, 63, 62, 0, 48, 49,
	50, 51, 52, 53, 54, 0, 45, 0, 64, 60,
	61, 56, 57, 59, 58, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 47, 0, 55, 0, 0, 0,
	65, 0, 63, 62, 0, 48, 49, 50, 51, 52,
	53, 54, 0, 45, 0, 64, 56, 57, 59, 58,
	29, 0, 0, 24, 30, 0, 25, 26, 0, 47,
	0, 55, 0, 0, 0, 65, 0, 63, 62, 0,
	48, 49, 50, 51, 52, 53, 54, 27, 45, 28,
	64, 47, 0, 55, 0, 31, 0, 65, 0, 0,
	0, 34, 48, 49, 50, 51, 32, 47, 0, 55,
	45, 0, 64, 65, 0, 0, 0, 0, 48, 49,
	50, 51, 0, 47, 0, 55, 0, 0, 64, 65,
	0, 0, 0, 0, 0, 0, 50, 51, 0, 0,
	0, 0, 0, 0, 64,
}
var yyPact = [...]int{

	100, -1000, 4, -29, 41, 32, 105, -1000, -1000, -5,
	55, 36, 34, -1000, 100, -1000, 41, 746, 102, 83,
	-1000, -1000, -1000, 660, -1000, -1000, -1000, 83, 746, -44,
	-1000, 746, 746, -1000, 746, 11, 102, 168, 92, 91,
	-1000, -1000, 10, -21, 45, 746, 746, 746, 746, 746,
	746, 746, 746, 746, 746, 746, 746, 746, 746, 746,
	746, 746, 746, 746, 88, 746, 9, -17, 126, 746,
	-20, 167, -20, -1000, -1000, 746, 746, 746, 746, 746,
	746, 746, 746, 746, 746, 87, -40, -42, -1000, 746,
	13, -16, 770, 623, -20, 786, 786, -22, -22, 754,
	754, 754, -22, -19, -19, -19, -19, 732, 732, -19,
	-19, -1000, 586, -1000, -1000, 746, -47, -1000, 511, 473,
	435, 397, 359, 321, 283, 245, 207, 549, -1000, -1000,
	-1000, 85, 102, 83, 746, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 83, 5,
	2, 697, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 122, 88, 72, 117, 1, 116, 115, 110, 0,
	2, 3,
}
var yyR1 = [...]int{

	0, 1, 1, 1, 1, 2, 2, 3, 3, 4,
	4, 4, 4, 4, 5, 5, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 10, 10, 11,
	11, 7, 7, 7, 6, 6, 6, 6,
}
var yyR2 = [...]int{

	0, 3, 3, 4, 3, 1, 3, 3, 3, 4,
	4, 4, 8, 8, 1, 2, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 3, 3, 1, 1, 1,
	3, 3, 4, 1, 3, 5, 2, 3, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 3, 3, 3, 5, 1,
	3, 3, 4, 1, 1, 1, 4, 3,
}
var yyChk = [...]int{

	-1000, -1, -2, 4, 36, 35, 41, -2, -3, -4,
	28, 29, 30, -2, 36, 4, 36, 31, 31, 31,
	-2, -2, -3, -9, 7, 10, 11, 31, 33, 4,
	8, 39, 50, -7, 45, -5, -8, -6, 5, 6,
	4, 9, -10, 4, 32, 46, 28, 27, 38, 39,
	40, 41, 42, 43, 44, 29, 14, 15, 17, 16,
	12, 13, 36, 35, 48, 33, -10, -11, -9, 50,
	-9, -9, -9, 32, -5, 30, 23, 24, 25, 18,
	19, 20, 21, 22, 33, 48, 4, 4, 32, 37,
	29, 30, -9, -9, -9, -9, -9, -9, -9, -9,
	-9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
	-9, 4, -9, 32, 34, 52, -11, 51, -9, -9,
	-9, -9, -9, -9, -9, -9, -9, -9, 4, 49,
	49, -9, 31, 31, 37, 34, -11, 51, 49, 49,
	49, 49, 49, 49, 49, 49, 49, 34, 52, -5,
	-10, -9, -10, 32, 32,
}
var yyDef = [...]int{

	0, -2, 0, 5, 0, 0, 0, 1, 4, 0,
	0, 0, 0, 2, 0, 6, 0, 0, 0, 0,
	3, 7, 8, 0, 27, 28, 29, 0, 0, 63,
	33, 0, 0, 38, 0, 0, 14, 0, 0, 0,
	64, 65, 0, 0, 9, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 59, 0,
	36, 0, 54, 10, 15, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 11, 0,
	0, 0, 34, 0, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 55,
	56, 61, 0, 30, 31, 0, 0, 37, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 67, 25,
	26, 57, 0, 0, 0, 62, 60, 32, 16, 17,
	18, 19, 20, 21, 22, 23, 24, 66, 0, 0,
	0, 35, 58, 12, 13,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 45, 3, 3, 3, 29, 42, 3,
	50, 51, 40, 38, 52, 39, 48, 41, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 37, 49,
	35, 30, 36, 28, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 33, 3, 34, 44, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 31, 43, 32, 46,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 47,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:51
		{
			// fmt.Println("C")
			yyVAL.routes = nil
			if l, ok := yylex.(*RouteLexer); ok {
				l.result = []*Route{&Route{Source: yyDollar[1].node.Name, Dest: yyDollar[3].node.Name}}
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:59
		{
			// fmt.Println("B")
			yyVAL.routes = nil
			if l, ok := yylex.(*RouteLexer); ok {
				l.result = []*Route{&Route{Source: yyDollar[3].node.Name, Dest: yyDollar[1].node.Name}}
			}
		}
	case 3:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:67
		{
			yyVAL.routes = nil
			if l, ok := yylex.(*RouteLexer); ok {
				l.result = []*Route{
					&Route{Source: yyDollar[1].node.Name, Dest: yyDollar[4].node.Name},
					&Route{Source: yyDollar[4].node.Name, Dest: yyDollar[1].node.Name}}
			}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:76
		{
			yyVAL.routes = nil
			// fmt.Println("A")
			if l, ok := yylex.(*RouteLexer); ok {
				l.result = []*Route{
					&Route{
						Source:     yyDollar[1].node.Name,
						Dest:       yyDollar[3].transforms.Dest,
						Transforms: yyDollar[3].transforms.Transforms}}
			}
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/mc/router/parser.go.y:89
		{
			yyVAL.node = &Node{Name: yyDollar[1].token.literal}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:93
		{
			yyVAL.node = &Node{Group: yyDollar[1].token.literal, Name: yyDollar[3].token.literal}
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:98
		{
			yyVAL.transforms = &Route{
				Dest:       yyDollar[3].node.Name,
				Transforms: []*Transform{yyDollar[1].transform}}
		}
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:104
		{
			yyVAL.transforms = &Route{
				Dest:       yyDollar[3].transforms.Dest,
				Transforms: append([]*Transform{yyDollar[1].transform}, yyDollar[3].transforms.Transforms...)}
		}
	case 9:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:111
		{
			yyVAL.transform = &Transform{
				Type:      TR_FILTER,
				Condition: yyDollar[3].expression}
		}
	case 10:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:117
		{
			yyVAL.transform = &Transform{
				Type:   TR_EDIT,
				Script: yyDollar[3].script}
		}
	case 11:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:123
		{
			yyVAL.transform = &Transform{
				Type:    TR_REPLACE,
				Replace: yyDollar[3].expression}
		}
	case 12:
		yyDollar = yyS[yypt-8 : yypt+1]
//line src/mc/router/parser.go.y:129
		{
			yyVAL.transform = &Transform{
				Type:      TR_COND_EDIT,
				Condition: yyDollar[3].expression,
				Script:    yyDollar[7].script}
		}
	case 13:
		yyDollar = yyS[yypt-8 : yypt+1]
//line src/mc/router/parser.go.y:136
		{
			yyVAL.transform = &Transform{
				Type:      TR_COND_REPLACE,
				Condition: yyDollar[3].expression,
				Replace:   yyDollar[7].expression}
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/mc/router/parser.go.y:145
		{
			yyVAL.script = []*Statement{yyDollar[1].statement}
		}
	case 15:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/mc/router/parser.go.y:149
		{
			yyVAL.script = append([]*Statement{yyDollar[1].statement}, yyDollar[2].script...)
		}
	case 16:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:154
		{
			yyVAL.statement = MakeAssignmentStatement(yyDollar[1].writeable, yyDollar[3].expression)
		}
	case 17:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:158
		{
			yyVAL.statement = MakeAssignmentStatement(yyDollar[1].writeable, &Expression{
				Operation: OP_BITWISEAND,
				Args:      []*Expression{yyDollar[1].writeable.ToExpression(), yyDollar[3].expression}})
		}
	case 18:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:164
		{
			yyVAL.statement = MakeAssignmentStatement(yyDollar[1].writeable, &Expression{
				Operation: OP_BITWISEOR,
				Args:      []*Expression{yyDollar[1].writeable.ToExpression(), yyDollar[3].expression}})
		}
	case 19:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:170
		{
			yyVAL.statement = MakeAssignmentStatement(yyDollar[1].writeable, &Expression{
				Operation: OP_BITWISEXOR,
				Args:      []*Expression{yyDollar[1].writeable.ToExpression(), yyDollar[3].expression}})
		}
	case 20:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:176
		{
			yyVAL.statement = MakeAssignmentStatement(yyDollar[1].writeable, &Expression{
				Operation: OP_PLUS,
				Args:      []*Expression{yyDollar[1].writeable.ToExpression(), yyDollar[3].expression}})
		}
	case 21:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:182
		{
			yyVAL.statement = MakeAssignmentStatement(yyDollar[1].writeable, &Expression{
				Operation: OP_MINUS,
				Args:      []*Expression{yyDollar[1].writeable.ToExpression(), yyDollar[3].expression}})
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:188
		{
			yyVAL.statement = MakeAssignmentStatement(yyDollar[1].writeable, &Expression{
				Operation: OP_MUL,
				Args:      []*Expression{yyDollar[1].writeable.ToExpression(), yyDollar[3].expression}})
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:194
		{
			yyVAL.statement = MakeAssignmentStatement(yyDollar[1].writeable, &Expression{
				Operation: OP_DIV,
				Args:      []*Expression{yyDollar[1].writeable.ToExpression(), yyDollar[3].expression}})
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:200
		{
			yyVAL.statement = MakeAssignmentStatement(yyDollar[1].writeable, &Expression{
				Operation: OP_MOD,
				Args:      []*Expression{yyDollar[1].writeable.ToExpression(), yyDollar[3].expression}})
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:206
		{
			yyVAL.statement = MakeDeclarationStatement(yyDollar[2].token.literal)
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:210
		{
			yyVAL.statement = MakeDeletionStatement(yyDollar[2].token.literal)
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/mc/router/parser.go.y:215
		{
			x, _ := strconv.ParseFloat(yyDollar[1].token.literal, 64)
			yyVAL.expression = &Expression{
				Operation: OP_NUM,
				Value:     MakeFloatValue(x)}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/mc/router/parser.go.y:222
		{
			yyVAL.expression = &Expression{
				Operation: OP_BOOL,
				Value:     MakeBoolValue(true)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/mc/router/parser.go.y:228
		{
			yyVAL.expression = &Expression{
				Operation: OP_BOOL,
				Value:     MakeBoolValue(false)}
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:234
		{
			yyVAL.expression = yyDollar[2].expression
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:238
		{
			yyVAL.expression = yyDollar[2].expression
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:242
		{
			yyVAL.expression = &Expression{
				Operation: OP_CALL,
				Args: []*Expression{
					MakeNameExpression(yyDollar[1].token.literal),
					yyDollar[3].expression}}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/mc/router/parser.go.y:250
		{
			yyVAL.expression = &Expression{
				Operation: OP_STRING,
				Value:     &Value{Type: VAL_STRING, StringVal: yyDollar[1].token.literal}}
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:256
		{
			yyVAL.expression = &Expression{
				Operation: OP_MATCH,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 35:
		yyDollar = yyS[yypt-5 : yypt+1]
//line src/mc/router/parser.go.y:262
		{
			yyVAL.expression = &Expression{
				Operation: OP_TERNARY,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression, yyDollar[5].expression}}
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/mc/router/parser.go.y:268
		{
			yyVAL.expression = &Expression{
				Operation: OP_UMINUS,
				Args:      []*Expression{yyDollar[2].expression}}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:274
		{
			yyVAL.expression = yyDollar[2].expression
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/mc/router/parser.go.y:278
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:282
		{
			yyVAL.expression = &Expression{
				Operation: OP_EXP,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:288
		{
			yyVAL.expression = &Expression{
				Operation: OP_PLUS,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:294
		{
			yyVAL.expression = &Expression{
				Operation: OP_MINUS,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:300
		{
			yyVAL.expression = &Expression{
				Operation: OP_MUL,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:306
		{
			yyVAL.expression = &Expression{
				Operation: OP_DIV,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:312
		{
			yyVAL.expression = &Expression{
				Operation: OP_BITWISEAND,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:318
		{
			yyVAL.expression = &Expression{
				Operation: OP_BITWISEOR,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:324
		{
			yyVAL.expression = &Expression{
				Operation: OP_BITWISEXOR,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:330
		{
			yyVAL.expression = &Expression{
				Operation: OP_MOD,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:336
		{
			yyVAL.expression = &Expression{
				Operation: OP_EQ,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:342
		{
			yyVAL.expression = &Expression{
				Operation: OP_NE,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:348
		{
			yyVAL.expression = &Expression{
				Operation: OP_GE,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:354
		{
			yyVAL.expression = &Expression{
				Operation: OP_LE,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:360
		{
			yyVAL.expression = &Expression{
				Operation: OP_AND,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:366
		{
			yyVAL.expression = &Expression{
				Operation: OP_OR,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/mc/router/parser.go.y:372
		{
			yyVAL.expression = &Expression{
				Operation: OP_NOT,
				Args:      []*Expression{yyDollar[2].expression}}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:378
		{
			yyVAL.expression = &Expression{
				Operation: OP_GT,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:384
		{
			yyVAL.expression = &Expression{
				Operation: OP_LT,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:391
		{
			yyVAL.expression = &Expression{
				Operation: OP_MAP,
				Args: []*Expression{
					MakeNameExpression(yyDollar[1].token.literal),
					yyDollar[3].expression}}
		}
	case 58:
		yyDollar = yyS[yypt-5 : yypt+1]
//line src/mc/router/parser.go.y:399
		{
			args := []*Expression{
				MakeNameExpression(yyDollar[1].token.literal),
				yyDollar[3].expression}
			yyVAL.expression = &Expression{
				Operation: OP_MAP,
				Args:      append(args, yyDollar[5].expression.Args...)}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/mc/router/parser.go.y:409
		{
			yyVAL.expression = &Expression{
				Operation: OP_LIST,
				Args:      []*Expression{yyDollar[1].expression}}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:415
		{
			args := []*Expression{yyDollar[1].expression}
			yyVAL.expression = &Expression{
				Operation: OP_LIST,
				Args:      append(args, yyDollar[3].expression.Args...)}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:423
		{
			yyVAL.expression = &Expression{
				Operation: OP_MAPVAR,
				Args:      []*Expression{yyDollar[1].expression, MakeNameExpression(yyDollar[3].token.literal)}}
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:429
		{
			yyVAL.expression = &Expression{
				Operation: OP_LISTVAR,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/mc/router/parser.go.y:435
		{
			yyVAL.expression = MakeVarExpression(yyDollar[1].token.literal)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/mc/router/parser.go.y:440
		{
			yyVAL.writeable = &WriteableValue{
				Base: yyDollar[1].token.literal,
				Path: []PathEntry{}}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/mc/router/parser.go.y:446
		{
			yyVAL.writeable = &WriteableValue{
				Base: "this",
				Path: []PathEntry{}}
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:452
		{
			yyDollar[1].writeable.Path = append(yyDollar[1].writeable.Path, PathEntry{Type: PATH_LIST, ListIndex: yyDollar[3].expression})
			yyVAL.writeable = yyDollar[1].writeable
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:457
		{
			yyDollar[1].writeable.Path = append(yyDollar[1].writeable.Path, PathEntry{Type: PATH_MAP, MapKey: yyDollar[3].token.literal})
			yyVAL.writeable = yyDollar[1].writeable
		}
	}
	goto yystack /* stack new state and value */
}
