// Code generated by goyacc -o src/mc/router/parser.go -v src/mc/router/parser.output src/mc/router/parser.go.y. DO NOT EDIT.

//line src/mc/router/parser.go.y:2
package router

import __yyfmt__ "fmt"

//line src/mc/router/parser.go.y:2
import (
	"strconv"
	//"fmt"
)

type Token struct {
	token    int
	literal  string
	position Position
}

//line src/mc/router/parser.go.y:13
type yySymType struct {
	yys        int
	token      Token
	routes     []*Route
	transforms *Route
	transform  *Transform
	expression *Expression
	statement  *Statement
	writeable  *WriteableValue
	script     []*Statement
	node       *Node
}

const IDENT = 57346
const VAR = 57347
const DEL = 57348
const NUMBER = 57349
const STRING = 57350
const THIS = 57351
const TRUE = 57352
const FALSE = 57353
const AND = 57354
const OR = 57355
const EQ = 57356
const NE = 57357
const LE = 57358
const GE = 57359
const PE = 57360
const ME = 57361
const TE = 57362
const DE = 57363
const RE = 57364
const AE = 57365
const OE = 57366
const XE = 57367
const SUB = 57368
const EXP = 57369
const UNARY = 57370

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"VAR",
	"DEL",
	"NUMBER",
	"STRING",
	"THIS",
	"TRUE",
	"FALSE",
	"AND",
	"OR",
	"EQ",
	"NE",
	"LE",
	"GE",
	"PE",
	"ME",
	"TE",
	"DE",
	"RE",
	"AE",
	"OE",
	"XE",
	"SUB",
	"EXP",
	"'?'",
	"'%'",
	"'='",
	"'{'",
	"'}'",
	"'['",
	"']'",
	"'<'",
	"'>'",
	"':'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'&'",
	"'|'",
	"'^'",
	"'!'",
	"'~'",
	"UNARY",
	"'.'",
	"';'",
	"'('",
	"')'",
	"','",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line src/mc/router/parser.go.y:531

func Parse(exp string) []*Route {
	l := new(RouteLexer)
	l.s = new(RouteScanner)
	l.s.Init(exp)
	//l.Init(strings.NewReader(exp))
	yyParse(l)
	return l.result
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 883

var yyAct = [...]int{

	81, 52, 80, 44, 37, 152, 82, 32, 38, 145,
	33, 34, 144, 6, 104, 60, 3, 78, 16, 31,
	128, 78, 148, 93, 94, 95, 96, 97, 90, 91,
	92, 35, 77, 36, 146, 89, 77, 79, 98, 39,
	83, 84, 127, 85, 86, 42, 5, 4, 14, 88,
	40, 103, 87, 99, 54, 102, 105, 3, 51, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 43, 126,
	53, 10, 11, 12, 8, 130, 29, 30, 25, 22,
	133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
	60, 28, 68, 143, 125, 147, 78, 73, 74, 69,
	70, 72, 71, 63, 64, 24, 21, 19, 23, 101,
	100, 77, 60, 59, 68, 3, 15, 20, 78, 45,
	76, 75, 151, 61, 62, 63, 64, 65, 66, 67,
	41, 58, 46, 77, 18, 17, 9, 163, 1, 56,
	164, 73, 74, 69, 70, 72, 71, 55, 49, 47,
	48, 0, 0, 50, 0, 165, 60, 59, 68, 0,
	0, 0, 78, 0, 76, 75, 0, 61, 62, 63,
	64, 65, 66, 67, 2, 58, 0, 77, 0, 7,
	13, 129, 73, 74, 69, 70, 72, 71, 0, 26,
	0, 27, 0, 0, 0, 0, 0, 60, 59, 68,
	0, 0, 0, 78, 0, 76, 75, 0, 61, 62,
	63, 64, 65, 66, 67, 0, 58, 0, 77, 0,
	0, 131, 73, 74, 69, 70, 72, 71, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 60, 59, 68,
	0, 0, 0, 78, 0, 76, 75, 0, 61, 62,
	63, 64, 65, 66, 67, 0, 58, 0, 77, 161,
	73, 74, 69, 70, 72, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 60, 59, 68, 0, 0,
	0, 78, 0, 76, 75, 0, 61, 62, 63, 64,
	65, 66, 67, 0, 58, 0, 77, 160, 73, 74,
	69, 70, 72, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 60, 59, 68, 0, 0, 0, 78,
	0, 76, 75, 0, 61, 62, 63, 64, 65, 66,
	67, 0, 58, 0, 77, 159, 73, 74, 69, 70,
	72, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 60, 59, 68, 0, 0, 0, 78, 0, 76,
	75, 0, 61, 62, 63, 64, 65, 66, 67, 0,
	58, 0, 77, 158, 73, 74, 69, 70, 72, 71,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 60,
	59, 68, 0, 0, 0, 78, 0, 76, 75, 0,
	61, 62, 63, 64, 65, 66, 67, 0, 58, 0,
	77, 157, 73, 74, 69, 70, 72, 71, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 60, 59, 68,
	0, 0, 0, 78, 0, 76, 75, 0, 61, 62,
	63, 64, 65, 66, 67, 0, 58, 0, 77, 156,
	73, 74, 69, 70, 72, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 60, 59, 68, 0, 0,
	0, 78, 0, 76, 75, 0, 61, 62, 63, 64,
	65, 66, 67, 0, 58, 0, 77, 155, 73, 74,
	69, 70, 72, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 60, 59, 68, 0, 0, 0, 78,
	0, 76, 75, 0, 61, 62, 63, 64, 65, 66,
	67, 0, 58, 0, 77, 154, 73, 74, 69, 70,
	72, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 60, 59, 68, 0, 0, 0, 78, 0, 76,
	75, 0, 61, 62, 63, 64, 65, 66, 67, 0,
	58, 0, 77, 153, 73, 74, 69, 70, 72, 71,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 60,
	59, 68, 0, 0, 0, 78, 162, 76, 75, 0,
	61, 62, 63, 64, 65, 66, 67, 0, 58, 0,
	77, 73, 74, 69, 70, 72, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 60, 59, 68, 0,
	0, 0, 78, 150, 76, 75, 0, 61, 62, 63,
	64, 65, 66, 67, 0, 58, 0, 77, 73, 74,
	69, 70, 72, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 60, 59, 68, 0, 0, 0, 78,
	0, 76, 75, 149, 61, 62, 63, 64, 65, 66,
	67, 0, 58, 0, 77, 73, 74, 69, 70, 72,
	71, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	60, 59, 68, 0, 0, 132, 78, 0, 76, 75,
	0, 61, 62, 63, 64, 65, 66, 67, 0, 58,
	0, 77, 73, 74, 69, 70, 72, 71, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 60, 59, 68,
	0, 0, 57, 78, 0, 76, 75, 0, 61, 62,
	63, 64, 65, 66, 67, 0, 58, 0, 77, 73,
	74, 69, 70, 72, 71, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 60, 0, 68, 0, 0, 0,
	78, 0, 76, 75, 0, 61, 62, 63, 64, 65,
	66, 67, 0, 58, 0, 77, 69, 70, 72, 71,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 60,
	0, 68, 0, 0, 0, 78, 0, 76, 75, 0,
	61, 62, 63, 64, 65, 66, 67, 60, 58, 68,
	77, 0, 0, 78, 0, 0, 0, 0, 61, 62,
	63, 64, 65, 66, 67, 60, 58, 68, 77, 0,
	0, 78, 0, 0, 0, 0, 61, 62, 63, 64,
	0, 60, 0, 68, 58, 0, 77, 78, 0, 0,
	0, 0, 61, 62, 63, 64, 0, 0, 0, 0,
	0, 0, 77,
}
var yyPact = [...]int{

	121, -1000, 11, -28, 53, 12, 122, -1000, -1000, -18,
	113, 85, 84, -1000, 121, -1000, 53, 57, 0, 47,
	-1000, 154, 27, -1000, 76, 23, -1000, -1000, -1000, 85,
	84, 710, -1000, -1000, -1000, 76, 0, -44, -1000, 0,
	0, -1000, 0, 0, 20, 154, 5, 116, 115, -1000,
	-1000, 154, 19, -23, 76, -1000, -1000, -1000, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 0, 10,
	-14, 139, 0, -16, 180, -16, 673, -1000, -1000, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	-37, -40, 2, -1000, 0, -10, 834, 636, -16, 73,
	73, -12, -12, 818, 818, 818, -12, 800, 800, 800,
	800, 782, 782, 800, 800, -1000, 599, -1000, -1000, 0,
	-46, -1000, -1000, 524, 486, 448, 410, 372, 334, 296,
	258, 220, 562, -1000, -1000, -1000, -1000, 95, -1000, 0,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 76, 747, -1000,
}
var yyPgo = [...]int{

	0, 148, 184, 84, 146, 145, 127, 118, 3, 142,
	140, 129, 0, 1, 2,
}
var yyR1 = [...]int{

	0, 1, 1, 1, 1, 2, 2, 3, 3, 4,
	4, 4, 4, 4, 5, 5, 5, 7, 7, 7,
	6, 6, 8, 8, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 13, 13, 14, 14, 10,
	10, 10, 9, 9, 9, 9,
}
var yyR2 = [...]int{

	0, 3, 3, 4, 3, 1, 3, 3, 3, 2,
	2, 2, 4, 4, 3, 4, 1, 3, 4, 1,
	3, 4, 1, 2, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 3, 3, 1, 1, 1, 3, 3,
	4, 1, 3, 5, 2, 3, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 3, 3, 3, 5, 1, 3, 3,
	4, 1, 1, 1, 4, 3,
}
var yyChk = [...]int{

	-1000, -1, -2, 4, 36, 35, 41, -2, -3, -4,
	28, 29, 30, -2, 36, 4, 36, -5, 31, 4,
	-6, 31, 4, -7, 31, 4, -2, -2, -3, 29,
	30, -12, 7, 10, 11, 31, 33, 4, 8, 39,
	50, -10, 45, 31, -8, -11, -9, 5, 6, 4,
	9, 31, -13, 4, 31, -6, -7, 32, 46, 28,
	27, 38, 39, 40, 41, 42, 43, 44, 29, 14,
	15, 17, 16, 12, 13, 36, 35, 48, 33, -13,
	-14, -12, 50, -12, -12, -12, -12, 32, -8, 30,
	23, 24, 25, 18, 19, 20, 21, 22, 33, 48,
	4, 4, -8, 32, 37, -13, -12, -12, -12, -12,
	-12, -12, -12, -12, -12, -12, -12, -12, -12, -12,
	-12, -12, -12, -12, -12, 4, -12, 32, 34, 52,
	-14, 51, 32, -12, -12, -12, -12, -12, -12, -12,
	-12, -12, -12, 4, 49, 49, 32, -12, 32, 37,
	34, -14, 51, 49, 49, 49, 49, 49, 49, 49,
	49, 49, 34, 52, -12, -13,
}
var yyDef = [...]int{

	0, -2, 0, 5, 0, 0, 0, 1, 4, 0,
	0, 0, 0, 2, 0, 6, 0, 9, 0, 16,
	10, 0, 0, 11, 0, 19, 3, 7, 8, 0,
	0, 0, 35, 36, 37, 0, 0, 71, 41, 0,
	0, 46, 0, 0, 0, 22, 0, 0, 0, 72,
	73, 0, 0, 0, 0, 12, 13, 14, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 67, 0, 44, 0, 62, 0, 20, 23, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 17, 0, 0, 42, 0, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 63, 64, 69, 0, 38, 39, 0,
	0, 45, 15, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 33, 34, 21, 65, 18, 0,
	70, 68, 40, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 74, 0, 43, 66,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 45, 3, 3, 3, 29, 42, 3,
	50, 51, 40, 38, 52, 39, 48, 41, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 37, 49,
	35, 30, 36, 28, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 33, 3, 34, 44, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 31, 43, 32, 46,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 47,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:54
		{
			// fmt.Println("C")
			yyVAL.routes = nil
			if l, ok := yylex.(*RouteLexer); ok {
				l.result = []*Route{&Route{Source: yyDollar[1].node, Dest: yyDollar[3].node}}
			}
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:62
		{
			// fmt.Println("B")
			yyVAL.routes = nil
			if l, ok := yylex.(*RouteLexer); ok {
				l.result = []*Route{&Route{Source: yyDollar[3].node, Dest: yyDollar[1].node}}
			}
		}
	case 3:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:70
		{
			yyVAL.routes = nil
			if l, ok := yylex.(*RouteLexer); ok {
				l.result = []*Route{
					&Route{Source: yyDollar[1].node, Dest: yyDollar[4].node},
					&Route{Source: yyDollar[4].node, Dest: yyDollar[1].node}}
			}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:79
		{
			yyVAL.routes = nil
			// fmt.Println("A")
			if l, ok := yylex.(*RouteLexer); ok {
				l.result = []*Route{
					&Route{
						Source:     yyDollar[1].node,
						Dest:       yyDollar[3].transforms.Dest,
						Transforms: yyDollar[3].transforms.Transforms}}
			}
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/mc/router/parser.go.y:92
		{
			yyVAL.node = &Node{Group: "root", Name: yyDollar[1].token.literal}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:96
		{
			yyVAL.node = &Node{Group: yyDollar[1].token.literal, Name: yyDollar[3].token.literal}
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:101
		{
			yyVAL.transforms = &Route{
				Dest:       yyDollar[3].node,
				Transforms: []*Transform{yyDollar[1].transform}}
		}
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:107
		{
			yyVAL.transforms = &Route{
				Dest:       yyDollar[3].transforms.Dest,
				Transforms: append([]*Transform{yyDollar[1].transform}, yyDollar[3].transforms.Transforms...)}
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/mc/router/parser.go.y:114
		{
			yyVAL.transform = &Transform{
				Type:             TR_FILTER,
				CommandCondition: yyDollar[2].transform.CommandCondition,
				Condition:        yyDollar[2].transform.Condition}
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/mc/router/parser.go.y:121
		{
			yyVAL.transform = &Transform{
				Type:           TR_EDIT,
				CommandReplace: yyDollar[2].transform.CommandReplace,
				Script:         yyDollar[2].transform.Script}
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/mc/router/parser.go.y:128
		{
			yyVAL.transform = &Transform{
				Type:           TR_REPLACE,
				CommandReplace: yyDollar[2].transform.CommandReplace,
				Replace:        yyDollar[2].transform.Replace}
		}
	case 12:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:135
		{
			yyVAL.transform = &Transform{
				Type:             TR_COND_EDIT,
				CommandCondition: yyDollar[2].transform.CommandCondition,
				CommandReplace:   yyDollar[4].transform.CommandReplace,
				Condition:        yyDollar[2].transform.Condition,
				Script:           yyDollar[4].transform.Script}
		}
	case 13:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:144
		{
			yyVAL.transform = &Transform{
				Type:             TR_COND_REPLACE,
				CommandCondition: yyDollar[2].transform.CommandCondition,
				Condition:        yyDollar[2].transform.Condition,
				CommandReplace:   yyDollar[4].transform.CommandReplace,
				Replace:          yyDollar[4].transform.Replace}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:154
		{
			yyVAL.transform = &Transform{
				Type:             TR_FILTER,
				CommandCondition: "",
				Condition:        yyDollar[2].expression}
		}
	case 15:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:161
		{
			yyVAL.transform = &Transform{
				Type:             TR_EDIT,
				CommandCondition: yyDollar[1].token.literal,
				Condition:        yyDollar[3].expression}
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/mc/router/parser.go.y:168
		{
			yyVAL.transform = &Transform{
				Type:             TR_EDIT,
				CommandCondition: yyDollar[1].token.literal,
				Condition:        nil}
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:176
		{
			yyVAL.transform = &Transform{
				Type:           TR_REPLACE,
				CommandReplace: "",
				Replace:        yyDollar[2].expression}
		}
	case 18:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:183
		{
			yyVAL.transform = &Transform{
				Type:           TR_REPLACE,
				CommandReplace: yyDollar[1].token.literal,
				Replace:        yyDollar[3].expression}
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/mc/router/parser.go.y:190
		{
			yyVAL.transform = &Transform{
				Type:           TR_REPLACE,
				CommandReplace: yyDollar[1].token.literal,
				Replace:        nil}
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:198
		{
			yyVAL.transform = &Transform{
				Type:           TR_EDIT,
				CommandReplace: "",
				Script:         yyDollar[2].script}
		}
	case 21:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:205
		{
			yyVAL.transform = &Transform{
				Type:           TR_EDIT,
				CommandReplace: yyDollar[1].token.literal,
				Script:         yyDollar[3].script}
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/mc/router/parser.go.y:214
		{
			yyVAL.script = []*Statement{yyDollar[1].statement}
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/mc/router/parser.go.y:218
		{
			yyVAL.script = append([]*Statement{yyDollar[1].statement}, yyDollar[2].script...)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:223
		{
			yyVAL.statement = MakeAssignmentStatement(yyDollar[1].writeable, yyDollar[3].expression)
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:227
		{
			yyVAL.statement = MakeAssignmentStatement(yyDollar[1].writeable, &Expression{
				Operation: OP_BITWISEAND,
				Args:      []*Expression{yyDollar[1].writeable.ToExpression(), yyDollar[3].expression}})
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:233
		{
			yyVAL.statement = MakeAssignmentStatement(yyDollar[1].writeable, &Expression{
				Operation: OP_BITWISEOR,
				Args:      []*Expression{yyDollar[1].writeable.ToExpression(), yyDollar[3].expression}})
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:239
		{
			yyVAL.statement = MakeAssignmentStatement(yyDollar[1].writeable, &Expression{
				Operation: OP_BITWISEXOR,
				Args:      []*Expression{yyDollar[1].writeable.ToExpression(), yyDollar[3].expression}})
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:245
		{
			yyVAL.statement = MakeAssignmentStatement(yyDollar[1].writeable, &Expression{
				Operation: OP_PLUS,
				Args:      []*Expression{yyDollar[1].writeable.ToExpression(), yyDollar[3].expression}})
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:251
		{
			yyVAL.statement = MakeAssignmentStatement(yyDollar[1].writeable, &Expression{
				Operation: OP_MINUS,
				Args:      []*Expression{yyDollar[1].writeable.ToExpression(), yyDollar[3].expression}})
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:257
		{
			yyVAL.statement = MakeAssignmentStatement(yyDollar[1].writeable, &Expression{
				Operation: OP_MUL,
				Args:      []*Expression{yyDollar[1].writeable.ToExpression(), yyDollar[3].expression}})
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:263
		{
			yyVAL.statement = MakeAssignmentStatement(yyDollar[1].writeable, &Expression{
				Operation: OP_DIV,
				Args:      []*Expression{yyDollar[1].writeable.ToExpression(), yyDollar[3].expression}})
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:269
		{
			yyVAL.statement = MakeAssignmentStatement(yyDollar[1].writeable, &Expression{
				Operation: OP_MOD,
				Args:      []*Expression{yyDollar[1].writeable.ToExpression(), yyDollar[3].expression}})
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:275
		{
			yyVAL.statement = MakeDeclarationStatement(yyDollar[2].token.literal)
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:279
		{
			yyVAL.statement = MakeDeletionStatement(yyDollar[2].token.literal)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/mc/router/parser.go.y:284
		{
			x, _ := strconv.ParseFloat(yyDollar[1].token.literal, 64)
			yyVAL.expression = &Expression{
				Operation: OP_NUM,
				Value:     MakeFloatValue(x)}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/mc/router/parser.go.y:291
		{
			yyVAL.expression = &Expression{
				Operation: OP_BOOL,
				Value:     MakeBoolValue(true)}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/mc/router/parser.go.y:297
		{
			yyVAL.expression = &Expression{
				Operation: OP_BOOL,
				Value:     MakeBoolValue(false)}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:303
		{
			yyVAL.expression = yyDollar[2].expression
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:307
		{
			yyVAL.expression = yyDollar[2].expression
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:311
		{
			yyVAL.expression = &Expression{
				Operation: OP_CALL,
				Args: []*Expression{
					MakeNameExpression(yyDollar[1].token.literal),
					yyDollar[3].expression}}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/mc/router/parser.go.y:319
		{
			yyVAL.expression = &Expression{
				Operation: OP_STRING,
				Value:     &Value{Type: VAL_STRING, StringVal: yyDollar[1].token.literal}}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:325
		{
			yyVAL.expression = &Expression{
				Operation: OP_MATCH,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 43:
		yyDollar = yyS[yypt-5 : yypt+1]
//line src/mc/router/parser.go.y:331
		{
			yyVAL.expression = &Expression{
				Operation: OP_TERNARY,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression, yyDollar[5].expression}}
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/mc/router/parser.go.y:337
		{
			yyVAL.expression = &Expression{
				Operation: OP_UMINUS,
				Args:      []*Expression{yyDollar[2].expression}}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:343
		{
			yyVAL.expression = yyDollar[2].expression
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/mc/router/parser.go.y:347
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:351
		{
			yyVAL.expression = &Expression{
				Operation: OP_EXP,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:357
		{
			yyVAL.expression = &Expression{
				Operation: OP_PLUS,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:363
		{
			yyVAL.expression = &Expression{
				Operation: OP_MINUS,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:369
		{
			yyVAL.expression = &Expression{
				Operation: OP_MUL,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:375
		{
			yyVAL.expression = &Expression{
				Operation: OP_DIV,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:381
		{
			yyVAL.expression = &Expression{
				Operation: OP_BITWISEAND,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:387
		{
			yyVAL.expression = &Expression{
				Operation: OP_BITWISEOR,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:393
		{
			yyVAL.expression = &Expression{
				Operation: OP_BITWISEXOR,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:399
		{
			yyVAL.expression = &Expression{
				Operation: OP_MOD,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:405
		{
			yyVAL.expression = &Expression{
				Operation: OP_EQ,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:411
		{
			yyVAL.expression = &Expression{
				Operation: OP_NE,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:417
		{
			yyVAL.expression = &Expression{
				Operation: OP_GE,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:423
		{
			yyVAL.expression = &Expression{
				Operation: OP_LE,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:429
		{
			yyVAL.expression = &Expression{
				Operation: OP_AND,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:435
		{
			yyVAL.expression = &Expression{
				Operation: OP_OR,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/mc/router/parser.go.y:441
		{
			yyVAL.expression = &Expression{
				Operation: OP_NOT,
				Args:      []*Expression{yyDollar[2].expression}}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:447
		{
			yyVAL.expression = &Expression{
				Operation: OP_GT,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:453
		{
			yyVAL.expression = &Expression{
				Operation: OP_LT,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:460
		{
			yyVAL.expression = &Expression{
				Operation: OP_MAP,
				Args: []*Expression{
					MakeNameExpression(yyDollar[1].token.literal),
					yyDollar[3].expression}}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line src/mc/router/parser.go.y:468
		{
			args := []*Expression{
				MakeNameExpression(yyDollar[1].token.literal),
				yyDollar[3].expression}
			yyVAL.expression = &Expression{
				Operation: OP_MAP,
				Args:      append(args, yyDollar[5].expression.Args...)}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/mc/router/parser.go.y:478
		{
			yyVAL.expression = &Expression{
				Operation: OP_LIST,
				Args:      []*Expression{yyDollar[1].expression}}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:484
		{
			args := []*Expression{yyDollar[1].expression}
			yyVAL.expression = &Expression{
				Operation: OP_LIST,
				Args:      append(args, yyDollar[3].expression.Args...)}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:492
		{
			yyVAL.expression = &Expression{
				Operation: OP_MAPVAR,
				Args:      []*Expression{yyDollar[1].expression, MakeNameExpression(yyDollar[3].token.literal)}}
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:498
		{
			yyVAL.expression = &Expression{
				Operation: OP_LISTVAR,
				Args:      []*Expression{yyDollar[1].expression, yyDollar[3].expression}}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/mc/router/parser.go.y:504
		{
			yyVAL.expression = MakeVarExpression(yyDollar[1].token.literal)
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/mc/router/parser.go.y:509
		{
			yyVAL.writeable = &WriteableValue{
				Base: yyDollar[1].token.literal,
				Path: []PathEntry{}}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/mc/router/parser.go.y:515
		{
			yyVAL.writeable = &WriteableValue{
				Base: "this",
				Path: []PathEntry{}}
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/mc/router/parser.go.y:521
		{
			yyDollar[1].writeable.Path = append(yyDollar[1].writeable.Path, PathEntry{Type: PATH_LIST, ListIndex: yyDollar[3].expression})
			yyVAL.writeable = yyDollar[1].writeable
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/mc/router/parser.go.y:526
		{
			yyDollar[1].writeable.Path = append(yyDollar[1].writeable.Path, PathEntry{Type: PATH_MAP, MapKey: yyDollar[3].token.literal})
			yyVAL.writeable = yyDollar[1].writeable
		}
	}
	goto yystack /* stack new state and value */
}
