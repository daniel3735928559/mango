// Code generated by goyacc -o src/mc/valuetype/parser.go -p ValueTypeParser -v src/mc/valuetype/parser.output src/mc/valuetype/parser.go.y. DO NOT EDIT.

//line src/mc/valuetype/parser.go.y:2
	package valuetype
import __yyfmt__ "fmt"
//line src/mc/valuetype/parser.go.y:2
			import (
		"strconv"
		"strings"
		"errors"
		value "mc/value"
	)
	type Token struct {
		token   int
		literal string
		position Position
	}
	type MapEntrySpec stuct {
		Name string
		Required bool
		DefaultVal *Value
		ValType *ValueType}

//line src/mc/valuetype/parser.go.y:20
type ValueTypeParserSymType struct{
	yys int
	typedesc *ValueType
	mapentries []*MapEntrySpec
	mapentry *MapEntrySpec
	val *value.Value
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const TRUE = 57349
const FALSE = 57350
const EXP = 57351
const NUM = 57352
const BOOL = 57353
const ONEOF = 57354
const AND = 57355
const OR = 57356
const NE = 57357
const GE = 57358
const LE = 57359
const EQ = 57360
const UNARY = 57361

var ValueTypeParserToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"TRUE",
	"FALSE",
	"EXP",
	"NUM",
	"BOOL",
	"ONEOF",
	"'?'",
	"'%'",
	"'='",
	"'{'",
	"'}'",
	"'['",
	"']'",
	"'<'",
	"'>'",
	"':'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'&'",
	"'|'",
	"'^'",
	"'!'",
	"'~'",
	"'('",
	"')'",
	"AND",
	"OR",
	"NE",
	"GE",
	"LE",
	"EQ",
	"UNARY",
	"'.'",
	"','",
}
var ValueTypeParserStatenames = [...]string{}

const ValueTypeParserEofCode = 1
const ValueTypeParserErrCode = 2
const ValueTypeParserInitialStackSize = 16

//line src/mc/valuetype/parser.go.y:207

func Parse(exp string) ([]*Route, error) {
	l := new(RouteLexer)
	lexerErrors := make([]string, 0)
	l.lexerErrors = &lexerErrors
	l.s = new(RouteScanner)
	l.s.Init(exp)
	//l.Init(strings.NewReader(exp))
	yyParse(l)
	if len(lexerErrors) > 0 {
		return nil, errors.New(strings.Join(lexerErrors, "\n"))
	}
	return l.result, nil
}

//line yacctab:1
var ValueTypeParserExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const ValueTypeParserPrivate = 57344

const ValueTypeParserLast = 63

var ValueTypeParserAct = [...]int{

	36, 39, 38, 20, 51, 45, 24, 23, 11, 17,
	16, 21, 3, 43, 22, 34, 44, 10, 12, 15,
	42, 18, 26, 27, 28, 29, 30, 37, 14, 2,
	19, 33, 13, 1, 31, 35, 32, 0, 25, 0,
	0, 0, 46, 0, 41, 48, 0, 0, 49, 50,
	4, 0, 52, 0, 5, 6, 8, 0, 0, 0,
	9, 0, 7,
}
var ValueTypeParserPact = [...]int{

	25, -1000, 44, -1000, -1000, -1000, -1000, 44, -24, 24,
	0, 44, 4, -12, -11, -1000, -26, -36, -1000, 24,
	18, 44, -7, -1000, 44, -1000, -1000, -1000, -1000, -1000,
	-1000, 23, 18, -1000, 44, -1000, 3, -9, -3, -37,
	18, -1000, -1000, 18, -1000, 18, -1000, 18, -38, -1000,
	-1000, 23, -1000,
}
var ValueTypeParserPgo = [...]int{

	0, 33, 9, 10, 18, 32, 1, 2, 0,
}
var ValueTypeParserR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 3, 3,
	4, 4, 5, 5, 5, 5, 5, 6, 6, 6,
	6, 6, 6, 8, 8, 7, 7,
}
var ValueTypeParserR2 = [...]int{

	0, 2, 1, 1, 1, 3, 4, 3, 1, 3,
	1, 3, 3, 4, 5, 6, 3, 1, 1, 1,
	1, 3, 3, 3, 5, 1, 3,
}
var ValueTypeParserChk = [...]int{

	-1000, -1, 4, -2, 6, 10, 11, 18, 12, 16,
	-2, 32, -4, -5, 4, 19, -3, -2, 17, 42,
	15, 22, 25, 33, 42, -4, -6, 5, 6, 7,
	8, 16, 18, -2, 22, -3, -8, 4, -7, -6,
	15, -2, 17, 22, 19, 42, -6, 15, -6, -7,
	-6, 42, -8,
}
var ValueTypeParserDef = [...]int{

	0, -2, 0, 1, 2, 3, 4, 0, 0, 0,
	0, 0, 0, 10, 0, 5, 0, 8, 7, 0,
	0, 0, 0, 6, 0, 11, 16, 17, 18, 19,
	20, 0, 0, 12, 0, 9, 0, 0, 0, 25,
	0, 13, 21, 0, 22, 0, 14, 0, 23, 26,
	15, 0, 24,
}
var ValueTypeParserTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 30, 3, 3, 3, 14, 27, 3,
	32, 33, 25, 23, 42, 24, 41, 26, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 22, 3,
	20, 15, 21, 13, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 18, 3, 19, 29, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 16, 28, 17, 31,
}
var ValueTypeParserTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 34, 35, 36, 37, 38, 39, 40,
}
var ValueTypeParserTok3 = [...]int{
	0,
}

var ValueTypeParserErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{
}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	ValueTypeParserDebug        = 0
	ValueTypeParserErrorVerbose = false
)

type ValueTypeParserLexer interface {
	Lex(lval *ValueTypeParserSymType) int
	Error(s string)
}

type ValueTypeParserParser interface {
	Parse(ValueTypeParserLexer) int
	Lookahead() int
}

type ValueTypeParserParserImpl struct {
	lval  ValueTypeParserSymType
	stack [ValueTypeParserInitialStackSize]ValueTypeParserSymType
	char  int
}

func (p *ValueTypeParserParserImpl) Lookahead() int {
	return p.char
}

func ValueTypeParserNewParser() ValueTypeParserParser {
	return &ValueTypeParserParserImpl{}
}

const ValueTypeParserFlag = -1000

func ValueTypeParserTokname(c int) string {
	if c >= 1 && c-1 < len(ValueTypeParserToknames) {
		if ValueTypeParserToknames[c-1] != "" {
			return ValueTypeParserToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func ValueTypeParserStatname(s int) string {
	if s >= 0 && s < len(ValueTypeParserStatenames) {
		if ValueTypeParserStatenames[s] != "" {
			return ValueTypeParserStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func ValueTypeParserErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !ValueTypeParserErrorVerbose {
		return "syntax error"
	}

	for _, e := range ValueTypeParserErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + ValueTypeParserTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := ValueTypeParserPact[state]
	for tok := TOKSTART; tok-1 < len(ValueTypeParserToknames); tok++ {
		if n := base + tok; n >= 0 && n < ValueTypeParserLast && ValueTypeParserChk[ValueTypeParserAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if ValueTypeParserDef[state] == -2 {
		i := 0
		for ValueTypeParserExca[i] != -1 || ValueTypeParserExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; ValueTypeParserExca[i] >= 0; i += 2 {
			tok := ValueTypeParserExca[i]
			if tok < TOKSTART || ValueTypeParserExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if ValueTypeParserExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += ValueTypeParserTokname(tok)
	}
	return res
}

func ValueTypeParserlex1(lex ValueTypeParserLexer, lval *ValueTypeParserSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = ValueTypeParserTok1[0]
		goto out
	}
	if char < len(ValueTypeParserTok1) {
		token = ValueTypeParserTok1[char]
		goto out
	}
	if char >= ValueTypeParserPrivate {
		if char < ValueTypeParserPrivate+len(ValueTypeParserTok2) {
			token = ValueTypeParserTok2[char-ValueTypeParserPrivate]
			goto out
		}
	}
	for i := 0; i < len(ValueTypeParserTok3); i += 2 {
		token = ValueTypeParserTok3[i+0]
		if token == char {
			token = ValueTypeParserTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = ValueTypeParserTok2[1] /* unknown char */
	}
	if ValueTypeParserDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", ValueTypeParserTokname(token), uint(char))
	}
	return char, token
}

func ValueTypeParserParse(ValueTypeParserlex ValueTypeParserLexer) int {
	return ValueTypeParserNewParser().Parse(ValueTypeParserlex)
}

func (ValueTypeParserrcvr *ValueTypeParserParserImpl) Parse(ValueTypeParserlex ValueTypeParserLexer) int {
	var ValueTypeParsern int
	var ValueTypeParserVAL ValueTypeParserSymType
	var ValueTypeParserDollar []ValueTypeParserSymType
	_ = ValueTypeParserDollar // silence set and not used
	ValueTypeParserS := ValueTypeParserrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	ValueTypeParserstate := 0
	ValueTypeParserrcvr.char = -1
	ValueTypeParsertoken := -1 // ValueTypeParserrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		ValueTypeParserstate = -1
		ValueTypeParserrcvr.char = -1
		ValueTypeParsertoken = -1
	}()
	ValueTypeParserp := -1
	goto ValueTypeParserstack

ret0:
	return 0

ret1:
	return 1

ValueTypeParserstack:
	/* put a state and value onto the stack */
	if ValueTypeParserDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", ValueTypeParserTokname(ValueTypeParsertoken), ValueTypeParserStatname(ValueTypeParserstate))
	}

	ValueTypeParserp++
	if ValueTypeParserp >= len(ValueTypeParserS) {
		nyys := make([]ValueTypeParserSymType, len(ValueTypeParserS)*2)
		copy(nyys, ValueTypeParserS)
		ValueTypeParserS = nyys
	}
	ValueTypeParserS[ValueTypeParserp] = ValueTypeParserVAL
	ValueTypeParserS[ValueTypeParserp].yys = ValueTypeParserstate

ValueTypeParsernewstate:
	ValueTypeParsern = ValueTypeParserPact[ValueTypeParserstate]
	if ValueTypeParsern <= ValueTypeParserFlag {
		goto ValueTypeParserdefault /* simple state */
	}
	if ValueTypeParserrcvr.char < 0 {
		ValueTypeParserrcvr.char, ValueTypeParsertoken = ValueTypeParserlex1(ValueTypeParserlex, &ValueTypeParserrcvr.lval)
	}
	ValueTypeParsern += ValueTypeParsertoken
	if ValueTypeParsern < 0 || ValueTypeParsern >= ValueTypeParserLast {
		goto ValueTypeParserdefault
	}
	ValueTypeParsern = ValueTypeParserAct[ValueTypeParsern]
	if ValueTypeParserChk[ValueTypeParsern] == ValueTypeParsertoken { /* valid shift */
		ValueTypeParserrcvr.char = -1
		ValueTypeParsertoken = -1
		ValueTypeParserVAL = ValueTypeParserrcvr.lval
		ValueTypeParserstate = ValueTypeParsern
		if Errflag > 0 {
			Errflag--
		}
		goto ValueTypeParserstack
	}

ValueTypeParserdefault:
	/* default state action */
	ValueTypeParsern = ValueTypeParserDef[ValueTypeParserstate]
	if ValueTypeParsern == -2 {
		if ValueTypeParserrcvr.char < 0 {
			ValueTypeParserrcvr.char, ValueTypeParsertoken = ValueTypeParserlex1(ValueTypeParserlex, &ValueTypeParserrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if ValueTypeParserExca[xi+0] == -1 && ValueTypeParserExca[xi+1] == ValueTypeParserstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			ValueTypeParsern = ValueTypeParserExca[xi+0]
			if ValueTypeParsern < 0 || ValueTypeParsern == ValueTypeParsertoken {
				break
			}
		}
		ValueTypeParsern = ValueTypeParserExca[xi+1]
		if ValueTypeParsern < 0 {
			goto ret0
		}
	}
	if ValueTypeParsern == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			ValueTypeParserlex.Error(ValueTypeParserErrorMessage(ValueTypeParserstate, ValueTypeParsertoken))
			Nerrs++
			if ValueTypeParserDebug >= 1 {
				__yyfmt__.Printf("%s", ValueTypeParserStatname(ValueTypeParserstate))
				__yyfmt__.Printf(" saw %s\n", ValueTypeParserTokname(ValueTypeParsertoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for ValueTypeParserp >= 0 {
				ValueTypeParsern = ValueTypeParserPact[ValueTypeParserS[ValueTypeParserp].yys] + ValueTypeParserErrCode
				if ValueTypeParsern >= 0 && ValueTypeParsern < ValueTypeParserLast {
					ValueTypeParserstate = ValueTypeParserAct[ValueTypeParsern] /* simulate a shift of "error" */
					if ValueTypeParserChk[ValueTypeParserstate] == ValueTypeParserErrCode {
						goto ValueTypeParserstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if ValueTypeParserDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", ValueTypeParserS[ValueTypeParserp].yys)
				}
				ValueTypeParserp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if ValueTypeParserDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", ValueTypeParserTokname(ValueTypeParsertoken))
			}
			if ValueTypeParsertoken == ValueTypeParserEofCode {
				goto ret1
			}
			ValueTypeParserrcvr.char = -1
			ValueTypeParsertoken = -1
			goto ValueTypeParsernewstate /* try again in the same state */
		}
	}

	/* reduction by production ValueTypeParsern */
	if ValueTypeParserDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", ValueTypeParsern, ValueTypeParserStatname(ValueTypeParserstate))
	}

	ValueTypeParsernt := ValueTypeParsern
	ValueTypeParserpt := ValueTypeParserp
	_ = ValueTypeParserpt // guard against "declared and not used"

	ValueTypeParserp -= ValueTypeParserR2[ValueTypeParsern]
	// ValueTypeParserp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if ValueTypeParserp+1 >= len(ValueTypeParserS) {
		nyys := make([]ValueTypeParserSymType, len(ValueTypeParserS)*2)
		copy(nyys, ValueTypeParserS)
		ValueTypeParserS = nyys
	}
	ValueTypeParserVAL = ValueTypeParserS[ValueTypeParserp+1]

	/* consult goto table to find next state */
	ValueTypeParsern = ValueTypeParserR1[ValueTypeParsern]
	ValueTypeParserg := ValueTypeParserPgo[ValueTypeParsern]
	ValueTypeParserj := ValueTypeParserg + ValueTypeParserS[ValueTypeParserp].yys + 1

	if ValueTypeParserj >= ValueTypeParserLast {
		ValueTypeParserstate = ValueTypeParserAct[ValueTypeParserg]
	} else {
		ValueTypeParserstate = ValueTypeParserAct[ValueTypeParserj]
		if ValueTypeParserChk[ValueTypeParserstate] != -ValueTypeParsern {
			ValueTypeParserstate = ValueTypeParserAct[ValueTypeParserg]
		}
	}
	// dummy call; replaced with literal code
	switch ValueTypeParsernt {

	case 1:
		ValueTypeParserDollar = ValueTypeParserS[ValueTypeParserpt-2:ValueTypeParserpt+1]
//line src/mc/valuetype/parser.go.y:52
		{
		ValueTypeParserDollar[2].typedesc.Name == ValueTypeParserDollar[1].token.literal
		ValueTypeParserVAL.typedesc = ValueTypeParserDollar[2].typedesc
	}
	case 2:
		ValueTypeParserDollar = ValueTypeParserS[ValueTypeParserpt-1:ValueTypeParserpt+1]
//line src/mc/valuetype/parser.go.y:58
		{
		ValueTypeParserVAL.typedesc = MakeStringType()
	}
	case 3:
		ValueTypeParserDollar = ValueTypeParserS[ValueTypeParserpt-1:ValueTypeParserpt+1]
//line src/mc/valuetype/parser.go.y:62
		{
		ValueTypeParserVAL.typedesc = MakeNumType()
	
	}
	case 4:
		ValueTypeParserDollar = ValueTypeParserS[ValueTypeParserpt-1:ValueTypeParserpt+1]
//line src/mc/valuetype/parser.go.y:67
		{
		ValueTypeParserVAL.typedesc = MakeBoolType()
	}
	case 5:
		ValueTypeParserDollar = ValueTypeParserS[ValueTypeParserpt-3:ValueTypeParserpt+1]
//line src/mc/valuetype/parser.go.y:71
		{
		ValueTypeParserVAL.typedesc = MakeListType(ValueTypeParserDollar[2].typedesc)
	}
	case 6:
		ValueTypeParserDollar = ValueTypeParserS[ValueTypeParserpt-4:ValueTypeParserpt+1]
//line src/mc/valuetype/parser.go.y:75
		{
		ValueTypeParserVAL.typedesc = MakeOneofType(ValueTypeParserDollar[2].token)
	}
	case 7:
		ValueTypeParserDollar = ValueTypeParserS[ValueTypeParserpt-3:ValueTypeParserpt+1]
//line src/mc/valuetype/parser.go.y:79
		{
		map_defaults := make(map[string]*Value)
		map_required := make(map[string]bool)
		map_types := make(map[string]*ValueType)
		for _, e := range ValueTypeParserDollar[2].mapentries {
			map_required = e.Required
			if e.DefaultVal != nil {
				map_defaults[e.Name] = e.DefaultVal
			}
			map_types[e.Name] = e.ValType
		}
		ValueTypeParserVAL.typedesc = &ValueType{
			Type: TY_MAP,
			MapArgTypes: map_types,
			MapArgRequired: map_required,
			MapDefaults: map_defaults}
	}
	case 8:
		ValueTypeParserDollar = ValueTypeParserS[ValueTypeParserpt-1:ValueTypeParserpt+1]
//line src/mc/valuetype/parser.go.y:98
		{
		ValueTypeParserVAL.typedesc = &ValueType{
			Type: TY_ONEOF,
			OneofTypes: []*ValueType{ValueTypeParserDollar[1].typedesc}}
	}
	case 9:
		ValueTypeParserDollar = ValueTypeParserS[ValueTypeParserpt-3:ValueTypeParserpt+1]
//line src/mc/valuetype/parser.go.y:104
		{
		ValueTypeParserVAL.typedesc = &ValueType{
			Type: TY_ONEOF,
			OneofTypes: append([]*ValueType{ValueTypeParserDollar[1].typedesc}, ValueTypeParserDollar[3].typedesc...)}
	}
	case 10:
		ValueTypeParserDollar = ValueTypeParserS[ValueTypeParserpt-1:ValueTypeParserpt+1]
//line src/mc/valuetype/parser.go.y:111
		{
		ValueTypeParserVAL.mapentries = []*MapEntrySpec{ValueTypeParserDollar[1].mapentry}
	}
	case 11:
		ValueTypeParserDollar = ValueTypeParserS[ValueTypeParserpt-3:ValueTypeParserpt+1]
//line src/mc/valuetype/parser.go.y:115
		{
		ValueTypeParserVAL.mapentries = append([]*MapEntrySpec{ValueTypeParserDollar[1].mapentry}, ValueTypeParserDollar[3].mapentries...)
	}
	case 12:
		ValueTypeParserDollar = ValueTypeParserS[ValueTypeParserpt-3:ValueTypeParserpt+1]
//line src/mc/valuetype/parser.go.y:120
		{
		ValueTypeParserVAL.mapentry = &MapEntrySpec{
			Name: ValueTypeParserDollar[1].token.literal,
			Required: trues,
			DefaultVal: nil,
			ValType: ValueTypeParserDollar[3].typedesc}
	}
	case 13:
		ValueTypeParserDollar = ValueTypeParserS[ValueTypeParserpt-4:ValueTypeParserpt+1]
//line src/mc/valuetype/parser.go.y:128
		{
		ValueTypeParserVAL.mapentry = &MapEntrySpec{
			Name: ValueTypeParserDollar[1].token.literal,
			Required: true,
			DefaultVal: nil,
			ValType: ValueTypeParserDollar[4].typedesc}
		
	}
	case 14:
		ValueTypeParserDollar = ValueTypeParserS[ValueTypeParserpt-5:ValueTypeParserpt+1]
//line src/mc/valuetype/parser.go.y:137
		{
		ValueTypeParserVAL.mapentry = &MapEntrySpec{
			Name: ValueTypeParserDollar[1].token.literal,
			Required: false,
			DefaultVal: ValueTypeParserDollar[5].val,
			ValType: ValueTypeParserDollar[3].typedesc}
		
	}
	case 15:
		ValueTypeParserDollar = ValueTypeParserS[ValueTypeParserpt-6:ValueTypeParserpt+1]
//line src/mc/valuetype/parser.go.y:146
		{
		ValueTypeParserVAL.mapentry = &MapEntrySpec{
			Name: ValueTypeParserDollar[1].token.literal,
			Required: false,
			DefaultVal: ValueTypeParserDollar[6].val,
			ValType: ValueTypeParserDollar[4].typedesc}
	}
	case 17:
		ValueTypeParserDollar = ValueTypeParserS[ValueTypeParserpt-1:ValueTypeParserpt+1]
//line src/mc/valuetype/parser.go.y:156
		{
		ValueTypeParserVAL.val = value.MakeFloatValue(x)
	}
	case 18:
		ValueTypeParserDollar = ValueTypeParserS[ValueTypeParserpt-1:ValueTypeParserpt+1]
//line src/mc/valuetype/parser.go.y:160
		{
		ValueTypeParserVAL.val = &value.Value{Type: value.VAL_STRING, StringVal: ValueTypeParserDollar[1].token.literal}
	}
	case 19:
		ValueTypeParserDollar = ValueTypeParserS[ValueTypeParserpt-1:ValueTypeParserpt+1]
//line src/mc/valuetype/parser.go.y:164
		{
		ValueTypeParserVAL.val = value.MakeBoolValue(true)
	}
	case 20:
		ValueTypeParserDollar = ValueTypeParserS[ValueTypeParserpt-1:ValueTypeParserpt+1]
//line src/mc/valuetype/parser.go.y:168
		{
		ValueTypeParserVAL.val = value.MakeBoolValue(false)
	}
	case 21:
		ValueTypeParserDollar = ValueTypeParserS[ValueTypeParserpt-3:ValueTypeParserpt+1]
//line src/mc/valuetype/parser.go.y:172
		{
		ValueTypeParserVAL.val = ValueTypeParserDollar[2].val
	}
	case 22:
		ValueTypeParserDollar = ValueTypeParserS[ValueTypeParserpt-3:ValueTypeParserpt+1]
//line src/mc/valuetype/parser.go.y:176
		{
		ValueTypeParserVAL.val = ValueTypeParserDollar[2].val
	}
	case 23:
		ValueTypeParserDollar = ValueTypeParserS[ValueTypeParserpt-3:ValueTypeParserpt+1]
//line src/mc/valuetype/parser.go.y:181
		{
		ValueTypeParserVAL.val = &value.Value{
			Type: value.VAL_MAP,
			MapVal: map[string]*Value{ValueTypeParserDollar[1].token.literal:ValueTypeParserDollar[3].val}}
	}
	case 24:
		ValueTypeParserDollar = ValueTypeParserS[ValueTypeParserpt-5:ValueTypeParserpt+1]
//line src/mc/valuetype/parser.go.y:187
		{
		map_val := ValueTypeParserDollar[5].val.MapVal
		map_val[ValueTypeParserDollar[1].token.literal] = ValueTypeParserDollar[3].val
		ValueTypeParserVAL.val = &value.Value{
			Type: value.VAL_MAP,
			MapVal: map_val}
	}
	case 25:
		ValueTypeParserDollar = ValueTypeParserS[ValueTypeParserpt-1:ValueTypeParserpt+1]
//line src/mc/valuetype/parser.go.y:196
		{
		ValueTypeParserVAL.val = &value.Value{
			Type: value.VAL_LIST,
			ListVal: []*Value{ValueTypeParserDollar[1].val}}
	}
	case 26:
		ValueTypeParserDollar = ValueTypeParserS[ValueTypeParserpt-3:ValueTypeParserpt+1]
//line src/mc/valuetype/parser.go.y:202
		{
		ValueTypeParserVAL.val = &value.Value{
			Type: value.VAL_LIST,
			ListVal: append([]*Value{ValueTypeParserDollar[1].val}, ValueTypeParserDollar[3].val.ListVal...)}
	}
	}
	goto ValueTypeParserstack /* stack new state and value */
}
