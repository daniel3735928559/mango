Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    REGEX
    RE

Grammar

Rule 0     S' -> route
Rule 1     route -> node > node
Rule 2     route -> transform > node
Rule 3     route -> node > route
Rule 4     route -> transform > route
Rule 5     route -> node BI node
Rule 6     route -> node BI route
Rule 7     node -> NAME
Rule 8     transform -> F filter
Rule 9     transform -> E edit
Rule 10    transform -> R replace
Rule 11    transform -> FE filter edit
Rule 12    transform -> FR filter replace
Rule 13    filter -> NAME
Rule 14    filter -> { test }
Rule 15    filter -> NAME { test }
Rule 16    edit -> NAME
Rule 17    edit -> NAME NAME
Rule 18    edit -> script
Rule 19    edit -> NAME script
Rule 20    edit -> NAME NAME script
Rule 21    replace -> map
Rule 22    replace -> NAME map
Rule 23    replace -> NAME NAME map
Rule 24    script -> { statements }
Rule 25    statements -> statement
Rule 26    statements -> statement ; statements
Rule 27    statement -> POP var
Rule 28    statement -> var = expr
Rule 29    statement -> var PE expr
Rule 30    statement -> var ME expr
Rule 31    statement -> var TE expr
Rule 32    statement -> var DE expr
Rule 33    expr -> test
Rule 34    expr -> test ? expr : expr
Rule 35    expr -> expr + expr
Rule 36    expr -> expr - expr
Rule 37    expr -> expr * expr
Rule 38    expr -> expr / expr
Rule 39    expr -> - expr
Rule 40    expr -> list
Rule 41    list -> [ expr_list ]
Rule 42    expr -> map
Rule 43    expr -> ( expr )
Rule 44    expr -> value
Rule 45    expr -> NAME
Rule 46    expr -> ID
Rule 47    test -> expr EQ expr
Rule 48    test -> expr GE expr
Rule 49    test -> expr > expr
Rule 50    test -> expr < expr
Rule 51    test -> expr LE expr
Rule 52    test -> ( test )
Rule 53    test -> test AND test
Rule 54    test -> ! test
Rule 55    test -> test OR test
Rule 56    expr_list -> expr , expr_list
Rule 57    expr_list -> expr
Rule 58    map -> { mappings }
Rule 59    mappings -> NAME : expr , mappings
Rule 60    mappings -> NAME : expr
Rule 61    var -> NAME
Rule 62    value -> FLOAT
Rule 63    value -> INT
Rule 64    value -> STRING
Rule 65    value -> TRUE
Rule 66    value -> FALSE

Terminals, with rules where they appear

!                    : 54
(                    : 43 52
)                    : 43 52
*                    : 37
+                    : 35
,                    : 56 59
-                    : 36 39
/                    : 38
:                    : 34 59 60
;                    : 26
<                    : 50
=                    : 28
>                    : 1 2 3 4 49
?                    : 34
AND                  : 53
BI                   : 5 6
DE                   : 32
E                    : 9
EQ                   : 47
F                    : 8
FALSE                : 66
FE                   : 11
FLOAT                : 62
FR                   : 12
GE                   : 48
ID                   : 46
INT                  : 63
LE                   : 51
ME                   : 30
NAME                 : 7 13 15 16 17 17 19 20 20 22 23 23 45 59 60 61
OR                   : 55
PE                   : 29
POP                  : 27
R                    : 10
RE                   : 
REGEX                : 
STRING               : 64
TE                   : 31
TRUE                 : 65
[                    : 41
]                    : 41
error                : 
{                    : 14 15 24 58
}                    : 14 15 24 58

Nonterminals, with rules where they appear

edit                 : 9 11
expr                 : 28 29 30 31 32 34 34 35 35 36 36 37 37 38 38 39 43 47 47 48 48 49 49 50 50 51 51 56 57 59 60
expr_list            : 41 56
filter               : 8 11 12
list                 : 40
map                  : 21 22 23 42
mappings             : 58 59
node                 : 1 1 2 3 5 5 6
replace              : 10 12
route                : 3 4 6 0
script               : 18 19 20
statement            : 25 26
statements           : 24 26
test                 : 14 15 33 34 52 53 53 54 55 55
transform            : 2 4
value                : 44
var                  : 27 28 29 30 31 32

Parsing method: LALR

state 0

    (0) S' -> . route
    (1) route -> . node > node
    (2) route -> . transform > node
    (3) route -> . node > route
    (4) route -> . transform > route
    (5) route -> . node BI node
    (6) route -> . node BI route
    (7) node -> . NAME
    (8) transform -> . F filter
    (9) transform -> . E edit
    (10) transform -> . R replace
    (11) transform -> . FE filter edit
    (12) transform -> . FR filter replace

    NAME            shift and go to state 4
    F               shift and go to state 5
    E               shift and go to state 6
    R               shift and go to state 7
    FE              shift and go to state 8
    FR              shift and go to state 9

    route                          shift and go to state 1
    node                           shift and go to state 2
    transform                      shift and go to state 3

state 1

    (0) S' -> route .



state 2

    (1) route -> node . > node
    (3) route -> node . > route
    (5) route -> node . BI node
    (6) route -> node . BI route

    >               shift and go to state 10
    BI              shift and go to state 11


state 3

    (2) route -> transform . > node
    (4) route -> transform . > route

    >               shift and go to state 12


state 4

    (7) node -> NAME .

    >               reduce using rule 7 (node -> NAME .)
    BI              reduce using rule 7 (node -> NAME .)
    $end            reduce using rule 7 (node -> NAME .)


state 5

    (8) transform -> F . filter
    (13) filter -> . NAME
    (14) filter -> . { test }
    (15) filter -> . NAME { test }

    NAME            shift and go to state 14
    {               shift and go to state 15

    filter                         shift and go to state 13

state 6

    (9) transform -> E . edit
    (16) edit -> . NAME
    (17) edit -> . NAME NAME
    (18) edit -> . script
    (19) edit -> . NAME script
    (20) edit -> . NAME NAME script
    (24) script -> . { statements }

    NAME            shift and go to state 17
    {               shift and go to state 19

    edit                           shift and go to state 16
    script                         shift and go to state 18

state 7

    (10) transform -> R . replace
    (21) replace -> . map
    (22) replace -> . NAME map
    (23) replace -> . NAME NAME map
    (58) map -> . { mappings }

    NAME            shift and go to state 22
    {               shift and go to state 23

    replace                        shift and go to state 20
    map                            shift and go to state 21

state 8

    (11) transform -> FE . filter edit
    (13) filter -> . NAME
    (14) filter -> . { test }
    (15) filter -> . NAME { test }

    NAME            shift and go to state 14
    {               shift and go to state 15

    filter                         shift and go to state 24

state 9

    (12) transform -> FR . filter replace
    (13) filter -> . NAME
    (14) filter -> . { test }
    (15) filter -> . NAME { test }

    NAME            shift and go to state 14
    {               shift and go to state 15

    filter                         shift and go to state 25

state 10

    (1) route -> node > . node
    (3) route -> node > . route
    (7) node -> . NAME
    (1) route -> . node > node
    (2) route -> . transform > node
    (3) route -> . node > route
    (4) route -> . transform > route
    (5) route -> . node BI node
    (6) route -> . node BI route
    (8) transform -> . F filter
    (9) transform -> . E edit
    (10) transform -> . R replace
    (11) transform -> . FE filter edit
    (12) transform -> . FR filter replace

    NAME            shift and go to state 4
    F               shift and go to state 5
    E               shift and go to state 6
    R               shift and go to state 7
    FE              shift and go to state 8
    FR              shift and go to state 9

    node                           shift and go to state 26
    route                          shift and go to state 27
    transform                      shift and go to state 3

state 11

    (5) route -> node BI . node
    (6) route -> node BI . route
    (7) node -> . NAME
    (1) route -> . node > node
    (2) route -> . transform > node
    (3) route -> . node > route
    (4) route -> . transform > route
    (5) route -> . node BI node
    (6) route -> . node BI route
    (8) transform -> . F filter
    (9) transform -> . E edit
    (10) transform -> . R replace
    (11) transform -> . FE filter edit
    (12) transform -> . FR filter replace

    NAME            shift and go to state 4
    F               shift and go to state 5
    E               shift and go to state 6
    R               shift and go to state 7
    FE              shift and go to state 8
    FR              shift and go to state 9

    node                           shift and go to state 28
    route                          shift and go to state 29
    transform                      shift and go to state 3

state 12

    (2) route -> transform > . node
    (4) route -> transform > . route
    (7) node -> . NAME
    (1) route -> . node > node
    (2) route -> . transform > node
    (3) route -> . node > route
    (4) route -> . transform > route
    (5) route -> . node BI node
    (6) route -> . node BI route
    (8) transform -> . F filter
    (9) transform -> . E edit
    (10) transform -> . R replace
    (11) transform -> . FE filter edit
    (12) transform -> . FR filter replace

    NAME            shift and go to state 4
    F               shift and go to state 5
    E               shift and go to state 6
    R               shift and go to state 7
    FE              shift and go to state 8
    FR              shift and go to state 9

    transform                      shift and go to state 3
    node                           shift and go to state 30
    route                          shift and go to state 31

state 13

    (8) transform -> F filter .

    >               reduce using rule 8 (transform -> F filter .)


state 14

    (13) filter -> NAME .
    (15) filter -> NAME . { test }

  ! shift/reduce conflict for { resolved as shift
    >               reduce using rule 13 (filter -> NAME .)
    NAME            reduce using rule 13 (filter -> NAME .)
    {               shift and go to state 32

  ! {               [ reduce using rule 13 (filter -> NAME .) ]


state 15

    (14) filter -> { . test }
    (47) test -> . expr EQ expr
    (48) test -> . expr GE expr
    (49) test -> . expr > expr
    (50) test -> . expr < expr
    (51) test -> . expr LE expr
    (52) test -> . ( test )
    (53) test -> . test AND test
    (54) test -> . ! test
    (55) test -> . test OR test
    (33) expr -> . test
    (34) expr -> . test ? expr : expr
    (35) expr -> . expr + expr
    (36) expr -> . expr - expr
    (37) expr -> . expr * expr
    (38) expr -> . expr / expr
    (39) expr -> . - expr
    (40) expr -> . list
    (42) expr -> . map
    (43) expr -> . ( expr )
    (44) expr -> . value
    (45) expr -> . NAME
    (46) expr -> . ID
    (41) list -> . [ expr_list ]
    (58) map -> . { mappings }
    (62) value -> . FLOAT
    (63) value -> . INT
    (64) value -> . STRING
    (65) value -> . TRUE
    (66) value -> . FALSE

    (               shift and go to state 35
    !               shift and go to state 36
    -               shift and go to state 37
    NAME            shift and go to state 41
    ID              shift and go to state 42
    [               shift and go to state 43
    {               shift and go to state 23
    FLOAT           shift and go to state 44
    INT             shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    test                           shift and go to state 33
    expr                           shift and go to state 34
    list                           shift and go to state 38
    map                            shift and go to state 39
    value                          shift and go to state 40

state 16

    (9) transform -> E edit .

    >               reduce using rule 9 (transform -> E edit .)


state 17

    (16) edit -> NAME .
    (17) edit -> NAME . NAME
    (19) edit -> NAME . script
    (20) edit -> NAME . NAME script
    (24) script -> . { statements }

    >               reduce using rule 16 (edit -> NAME .)
    NAME            shift and go to state 49
    {               shift and go to state 19

    script                         shift and go to state 50

state 18

    (18) edit -> script .

    >               reduce using rule 18 (edit -> script .)


state 19

    (24) script -> { . statements }
    (25) statements -> . statement
    (26) statements -> . statement ; statements
    (27) statement -> . POP var
    (28) statement -> . var = expr
    (29) statement -> . var PE expr
    (30) statement -> . var ME expr
    (31) statement -> . var TE expr
    (32) statement -> . var DE expr
    (61) var -> . NAME

    POP             shift and go to state 53
    NAME            shift and go to state 55

    statements                     shift and go to state 51
    statement                      shift and go to state 52
    var                            shift and go to state 54

state 20

    (10) transform -> R replace .

    >               reduce using rule 10 (transform -> R replace .)


state 21

    (21) replace -> map .

    >               reduce using rule 21 (replace -> map .)


state 22

    (22) replace -> NAME . map
    (23) replace -> NAME . NAME map
    (58) map -> . { mappings }

    NAME            shift and go to state 56
    {               shift and go to state 23

    map                            shift and go to state 57

state 23

    (58) map -> { . mappings }
    (59) mappings -> . NAME : expr , mappings
    (60) mappings -> . NAME : expr

    NAME            shift and go to state 59

    mappings                       shift and go to state 58

state 24

    (11) transform -> FE filter . edit
    (16) edit -> . NAME
    (17) edit -> . NAME NAME
    (18) edit -> . script
    (19) edit -> . NAME script
    (20) edit -> . NAME NAME script
    (24) script -> . { statements }

    NAME            shift and go to state 17
    {               shift and go to state 19

    edit                           shift and go to state 60
    script                         shift and go to state 18

state 25

    (12) transform -> FR filter . replace
    (21) replace -> . map
    (22) replace -> . NAME map
    (23) replace -> . NAME NAME map
    (58) map -> . { mappings }

    NAME            shift and go to state 22
    {               shift and go to state 23

    replace                        shift and go to state 61
    map                            shift and go to state 21

state 26

    (1) route -> node > node .
    (1) route -> node . > node
    (3) route -> node . > route
    (5) route -> node . BI node
    (6) route -> node . BI route

    $end            reduce using rule 1 (route -> node > node .)
    >               shift and go to state 10
    BI              shift and go to state 11


state 27

    (3) route -> node > route .

    $end            reduce using rule 3 (route -> node > route .)


state 28

    (5) route -> node BI node .
    (1) route -> node . > node
    (3) route -> node . > route
    (5) route -> node . BI node
    (6) route -> node . BI route

    $end            reduce using rule 5 (route -> node BI node .)
    >               shift and go to state 10
    BI              shift and go to state 11


state 29

    (6) route -> node BI route .

    $end            reduce using rule 6 (route -> node BI route .)


state 30

    (2) route -> transform > node .
    (1) route -> node . > node
    (3) route -> node . > route
    (5) route -> node . BI node
    (6) route -> node . BI route

    $end            reduce using rule 2 (route -> transform > node .)
    >               shift and go to state 10
    BI              shift and go to state 11


state 31

    (4) route -> transform > route .

    $end            reduce using rule 4 (route -> transform > route .)


state 32

    (15) filter -> NAME { . test }
    (47) test -> . expr EQ expr
    (48) test -> . expr GE expr
    (49) test -> . expr > expr
    (50) test -> . expr < expr
    (51) test -> . expr LE expr
    (52) test -> . ( test )
    (53) test -> . test AND test
    (54) test -> . ! test
    (55) test -> . test OR test
    (33) expr -> . test
    (34) expr -> . test ? expr : expr
    (35) expr -> . expr + expr
    (36) expr -> . expr - expr
    (37) expr -> . expr * expr
    (38) expr -> . expr / expr
    (39) expr -> . - expr
    (40) expr -> . list
    (42) expr -> . map
    (43) expr -> . ( expr )
    (44) expr -> . value
    (45) expr -> . NAME
    (46) expr -> . ID
    (41) list -> . [ expr_list ]
    (58) map -> . { mappings }
    (62) value -> . FLOAT
    (63) value -> . INT
    (64) value -> . STRING
    (65) value -> . TRUE
    (66) value -> . FALSE

    (               shift and go to state 35
    !               shift and go to state 36
    -               shift and go to state 37
    NAME            shift and go to state 41
    ID              shift and go to state 42
    [               shift and go to state 43
    {               shift and go to state 23
    FLOAT           shift and go to state 44
    INT             shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    test                           shift and go to state 62
    expr                           shift and go to state 34
    list                           shift and go to state 38
    map                            shift and go to state 39
    value                          shift and go to state 40

state 33

    (14) filter -> { test . }
    (53) test -> test . AND test
    (55) test -> test . OR test
    (33) expr -> test .
    (34) expr -> test . ? expr : expr

    }               shift and go to state 63
    AND             shift and go to state 64
    OR              shift and go to state 65
    EQ              reduce using rule 33 (expr -> test .)
    GE              reduce using rule 33 (expr -> test .)
    >               reduce using rule 33 (expr -> test .)
    <               reduce using rule 33 (expr -> test .)
    LE              reduce using rule 33 (expr -> test .)
    +               reduce using rule 33 (expr -> test .)
    -               reduce using rule 33 (expr -> test .)
    *               reduce using rule 33 (expr -> test .)
    /               reduce using rule 33 (expr -> test .)
    ?               shift and go to state 66


state 34

    (47) test -> expr . EQ expr
    (48) test -> expr . GE expr
    (49) test -> expr . > expr
    (50) test -> expr . < expr
    (51) test -> expr . LE expr
    (35) expr -> expr . + expr
    (36) expr -> expr . - expr
    (37) expr -> expr . * expr
    (38) expr -> expr . / expr

    EQ              shift and go to state 67
    GE              shift and go to state 68
    >               shift and go to state 69
    <               shift and go to state 70
    LE              shift and go to state 71
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75


state 35

    (52) test -> ( . test )
    (43) expr -> ( . expr )
    (47) test -> . expr EQ expr
    (48) test -> . expr GE expr
    (49) test -> . expr > expr
    (50) test -> . expr < expr
    (51) test -> . expr LE expr
    (52) test -> . ( test )
    (53) test -> . test AND test
    (54) test -> . ! test
    (55) test -> . test OR test
    (33) expr -> . test
    (34) expr -> . test ? expr : expr
    (35) expr -> . expr + expr
    (36) expr -> . expr - expr
    (37) expr -> . expr * expr
    (38) expr -> . expr / expr
    (39) expr -> . - expr
    (40) expr -> . list
    (42) expr -> . map
    (43) expr -> . ( expr )
    (44) expr -> . value
    (45) expr -> . NAME
    (46) expr -> . ID
    (41) list -> . [ expr_list ]
    (58) map -> . { mappings }
    (62) value -> . FLOAT
    (63) value -> . INT
    (64) value -> . STRING
    (65) value -> . TRUE
    (66) value -> . FALSE

    (               shift and go to state 35
    !               shift and go to state 36
    -               shift and go to state 37
    NAME            shift and go to state 41
    ID              shift and go to state 42
    [               shift and go to state 43
    {               shift and go to state 23
    FLOAT           shift and go to state 44
    INT             shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    test                           shift and go to state 76
    expr                           shift and go to state 77
    list                           shift and go to state 38
    map                            shift and go to state 39
    value                          shift and go to state 40

state 36

    (54) test -> ! . test
    (47) test -> . expr EQ expr
    (48) test -> . expr GE expr
    (49) test -> . expr > expr
    (50) test -> . expr < expr
    (51) test -> . expr LE expr
    (52) test -> . ( test )
    (53) test -> . test AND test
    (54) test -> . ! test
    (55) test -> . test OR test
    (33) expr -> . test
    (34) expr -> . test ? expr : expr
    (35) expr -> . expr + expr
    (36) expr -> . expr - expr
    (37) expr -> . expr * expr
    (38) expr -> . expr / expr
    (39) expr -> . - expr
    (40) expr -> . list
    (42) expr -> . map
    (43) expr -> . ( expr )
    (44) expr -> . value
    (45) expr -> . NAME
    (46) expr -> . ID
    (41) list -> . [ expr_list ]
    (58) map -> . { mappings }
    (62) value -> . FLOAT
    (63) value -> . INT
    (64) value -> . STRING
    (65) value -> . TRUE
    (66) value -> . FALSE

    (               shift and go to state 35
    !               shift and go to state 36
    -               shift and go to state 37
    NAME            shift and go to state 41
    ID              shift and go to state 42
    [               shift and go to state 43
    {               shift and go to state 23
    FLOAT           shift and go to state 44
    INT             shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    test                           shift and go to state 78
    expr                           shift and go to state 34
    list                           shift and go to state 38
    map                            shift and go to state 39
    value                          shift and go to state 40

state 37

    (39) expr -> - . expr
    (33) expr -> . test
    (34) expr -> . test ? expr : expr
    (35) expr -> . expr + expr
    (36) expr -> . expr - expr
    (37) expr -> . expr * expr
    (38) expr -> . expr / expr
    (39) expr -> . - expr
    (40) expr -> . list
    (42) expr -> . map
    (43) expr -> . ( expr )
    (44) expr -> . value
    (45) expr -> . NAME
    (46) expr -> . ID
    (47) test -> . expr EQ expr
    (48) test -> . expr GE expr
    (49) test -> . expr > expr
    (50) test -> . expr < expr
    (51) test -> . expr LE expr
    (52) test -> . ( test )
    (53) test -> . test AND test
    (54) test -> . ! test
    (55) test -> . test OR test
    (41) list -> . [ expr_list ]
    (58) map -> . { mappings }
    (62) value -> . FLOAT
    (63) value -> . INT
    (64) value -> . STRING
    (65) value -> . TRUE
    (66) value -> . FALSE

    -               shift and go to state 37
    (               shift and go to state 81
    NAME            shift and go to state 41
    ID              shift and go to state 42
    !               shift and go to state 36
    [               shift and go to state 43
    {               shift and go to state 23
    FLOAT           shift and go to state 44
    INT             shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    expr                           shift and go to state 79
    test                           shift and go to state 80
    list                           shift and go to state 38
    map                            shift and go to state 39
    value                          shift and go to state 40

state 38

    (40) expr -> list .

    EQ              reduce using rule 40 (expr -> list .)
    GE              reduce using rule 40 (expr -> list .)
    >               reduce using rule 40 (expr -> list .)
    <               reduce using rule 40 (expr -> list .)
    LE              reduce using rule 40 (expr -> list .)
    +               reduce using rule 40 (expr -> list .)
    -               reduce using rule 40 (expr -> list .)
    *               reduce using rule 40 (expr -> list .)
    /               reduce using rule 40 (expr -> list .)
    )               reduce using rule 40 (expr -> list .)
    AND             reduce using rule 40 (expr -> list .)
    OR              reduce using rule 40 (expr -> list .)
    ?               reduce using rule 40 (expr -> list .)
    }               reduce using rule 40 (expr -> list .)
    ,               reduce using rule 40 (expr -> list .)
    ]               reduce using rule 40 (expr -> list .)
    :               reduce using rule 40 (expr -> list .)
    ;               reduce using rule 40 (expr -> list .)


state 39

    (42) expr -> map .

    EQ              reduce using rule 42 (expr -> map .)
    GE              reduce using rule 42 (expr -> map .)
    >               reduce using rule 42 (expr -> map .)
    <               reduce using rule 42 (expr -> map .)
    LE              reduce using rule 42 (expr -> map .)
    +               reduce using rule 42 (expr -> map .)
    -               reduce using rule 42 (expr -> map .)
    *               reduce using rule 42 (expr -> map .)
    /               reduce using rule 42 (expr -> map .)
    )               reduce using rule 42 (expr -> map .)
    AND             reduce using rule 42 (expr -> map .)
    OR              reduce using rule 42 (expr -> map .)
    ?               reduce using rule 42 (expr -> map .)
    }               reduce using rule 42 (expr -> map .)
    ,               reduce using rule 42 (expr -> map .)
    ]               reduce using rule 42 (expr -> map .)
    :               reduce using rule 42 (expr -> map .)
    ;               reduce using rule 42 (expr -> map .)


state 40

    (44) expr -> value .

    EQ              reduce using rule 44 (expr -> value .)
    GE              reduce using rule 44 (expr -> value .)
    >               reduce using rule 44 (expr -> value .)
    <               reduce using rule 44 (expr -> value .)
    LE              reduce using rule 44 (expr -> value .)
    +               reduce using rule 44 (expr -> value .)
    -               reduce using rule 44 (expr -> value .)
    *               reduce using rule 44 (expr -> value .)
    /               reduce using rule 44 (expr -> value .)
    )               reduce using rule 44 (expr -> value .)
    AND             reduce using rule 44 (expr -> value .)
    OR              reduce using rule 44 (expr -> value .)
    ?               reduce using rule 44 (expr -> value .)
    }               reduce using rule 44 (expr -> value .)
    ,               reduce using rule 44 (expr -> value .)
    ]               reduce using rule 44 (expr -> value .)
    :               reduce using rule 44 (expr -> value .)
    ;               reduce using rule 44 (expr -> value .)


state 41

    (45) expr -> NAME .

    EQ              reduce using rule 45 (expr -> NAME .)
    GE              reduce using rule 45 (expr -> NAME .)
    >               reduce using rule 45 (expr -> NAME .)
    <               reduce using rule 45 (expr -> NAME .)
    LE              reduce using rule 45 (expr -> NAME .)
    +               reduce using rule 45 (expr -> NAME .)
    -               reduce using rule 45 (expr -> NAME .)
    *               reduce using rule 45 (expr -> NAME .)
    /               reduce using rule 45 (expr -> NAME .)
    )               reduce using rule 45 (expr -> NAME .)
    AND             reduce using rule 45 (expr -> NAME .)
    OR              reduce using rule 45 (expr -> NAME .)
    ?               reduce using rule 45 (expr -> NAME .)
    }               reduce using rule 45 (expr -> NAME .)
    ,               reduce using rule 45 (expr -> NAME .)
    ]               reduce using rule 45 (expr -> NAME .)
    :               reduce using rule 45 (expr -> NAME .)
    ;               reduce using rule 45 (expr -> NAME .)


state 42

    (46) expr -> ID .

    EQ              reduce using rule 46 (expr -> ID .)
    GE              reduce using rule 46 (expr -> ID .)
    >               reduce using rule 46 (expr -> ID .)
    <               reduce using rule 46 (expr -> ID .)
    LE              reduce using rule 46 (expr -> ID .)
    +               reduce using rule 46 (expr -> ID .)
    -               reduce using rule 46 (expr -> ID .)
    *               reduce using rule 46 (expr -> ID .)
    /               reduce using rule 46 (expr -> ID .)
    )               reduce using rule 46 (expr -> ID .)
    AND             reduce using rule 46 (expr -> ID .)
    OR              reduce using rule 46 (expr -> ID .)
    ?               reduce using rule 46 (expr -> ID .)
    }               reduce using rule 46 (expr -> ID .)
    ,               reduce using rule 46 (expr -> ID .)
    ]               reduce using rule 46 (expr -> ID .)
    :               reduce using rule 46 (expr -> ID .)
    ;               reduce using rule 46 (expr -> ID .)


state 43

    (41) list -> [ . expr_list ]
    (56) expr_list -> . expr , expr_list
    (57) expr_list -> . expr
    (33) expr -> . test
    (34) expr -> . test ? expr : expr
    (35) expr -> . expr + expr
    (36) expr -> . expr - expr
    (37) expr -> . expr * expr
    (38) expr -> . expr / expr
    (39) expr -> . - expr
    (40) expr -> . list
    (42) expr -> . map
    (43) expr -> . ( expr )
    (44) expr -> . value
    (45) expr -> . NAME
    (46) expr -> . ID
    (47) test -> . expr EQ expr
    (48) test -> . expr GE expr
    (49) test -> . expr > expr
    (50) test -> . expr < expr
    (51) test -> . expr LE expr
    (52) test -> . ( test )
    (53) test -> . test AND test
    (54) test -> . ! test
    (55) test -> . test OR test
    (41) list -> . [ expr_list ]
    (58) map -> . { mappings }
    (62) value -> . FLOAT
    (63) value -> . INT
    (64) value -> . STRING
    (65) value -> . TRUE
    (66) value -> . FALSE

    -               shift and go to state 37
    (               shift and go to state 81
    NAME            shift and go to state 41
    ID              shift and go to state 42
    !               shift and go to state 36
    [               shift and go to state 43
    {               shift and go to state 23
    FLOAT           shift and go to state 44
    INT             shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    expr_list                      shift and go to state 82
    expr                           shift and go to state 83
    test                           shift and go to state 80
    list                           shift and go to state 38
    map                            shift and go to state 39
    value                          shift and go to state 40

state 44

    (62) value -> FLOAT .

    EQ              reduce using rule 62 (value -> FLOAT .)
    GE              reduce using rule 62 (value -> FLOAT .)
    >               reduce using rule 62 (value -> FLOAT .)
    <               reduce using rule 62 (value -> FLOAT .)
    LE              reduce using rule 62 (value -> FLOAT .)
    +               reduce using rule 62 (value -> FLOAT .)
    -               reduce using rule 62 (value -> FLOAT .)
    *               reduce using rule 62 (value -> FLOAT .)
    /               reduce using rule 62 (value -> FLOAT .)
    )               reduce using rule 62 (value -> FLOAT .)
    AND             reduce using rule 62 (value -> FLOAT .)
    OR              reduce using rule 62 (value -> FLOAT .)
    ?               reduce using rule 62 (value -> FLOAT .)
    }               reduce using rule 62 (value -> FLOAT .)
    ,               reduce using rule 62 (value -> FLOAT .)
    ]               reduce using rule 62 (value -> FLOAT .)
    :               reduce using rule 62 (value -> FLOAT .)
    ;               reduce using rule 62 (value -> FLOAT .)


state 45

    (63) value -> INT .

    EQ              reduce using rule 63 (value -> INT .)
    GE              reduce using rule 63 (value -> INT .)
    >               reduce using rule 63 (value -> INT .)
    <               reduce using rule 63 (value -> INT .)
    LE              reduce using rule 63 (value -> INT .)
    +               reduce using rule 63 (value -> INT .)
    -               reduce using rule 63 (value -> INT .)
    *               reduce using rule 63 (value -> INT .)
    /               reduce using rule 63 (value -> INT .)
    )               reduce using rule 63 (value -> INT .)
    AND             reduce using rule 63 (value -> INT .)
    OR              reduce using rule 63 (value -> INT .)
    ?               reduce using rule 63 (value -> INT .)
    }               reduce using rule 63 (value -> INT .)
    ,               reduce using rule 63 (value -> INT .)
    ]               reduce using rule 63 (value -> INT .)
    :               reduce using rule 63 (value -> INT .)
    ;               reduce using rule 63 (value -> INT .)


state 46

    (64) value -> STRING .

    EQ              reduce using rule 64 (value -> STRING .)
    GE              reduce using rule 64 (value -> STRING .)
    >               reduce using rule 64 (value -> STRING .)
    <               reduce using rule 64 (value -> STRING .)
    LE              reduce using rule 64 (value -> STRING .)
    +               reduce using rule 64 (value -> STRING .)
    -               reduce using rule 64 (value -> STRING .)
    *               reduce using rule 64 (value -> STRING .)
    /               reduce using rule 64 (value -> STRING .)
    )               reduce using rule 64 (value -> STRING .)
    AND             reduce using rule 64 (value -> STRING .)
    OR              reduce using rule 64 (value -> STRING .)
    ?               reduce using rule 64 (value -> STRING .)
    }               reduce using rule 64 (value -> STRING .)
    ,               reduce using rule 64 (value -> STRING .)
    ]               reduce using rule 64 (value -> STRING .)
    :               reduce using rule 64 (value -> STRING .)
    ;               reduce using rule 64 (value -> STRING .)


state 47

    (65) value -> TRUE .

    EQ              reduce using rule 65 (value -> TRUE .)
    GE              reduce using rule 65 (value -> TRUE .)
    >               reduce using rule 65 (value -> TRUE .)
    <               reduce using rule 65 (value -> TRUE .)
    LE              reduce using rule 65 (value -> TRUE .)
    +               reduce using rule 65 (value -> TRUE .)
    -               reduce using rule 65 (value -> TRUE .)
    *               reduce using rule 65 (value -> TRUE .)
    /               reduce using rule 65 (value -> TRUE .)
    )               reduce using rule 65 (value -> TRUE .)
    AND             reduce using rule 65 (value -> TRUE .)
    OR              reduce using rule 65 (value -> TRUE .)
    ?               reduce using rule 65 (value -> TRUE .)
    }               reduce using rule 65 (value -> TRUE .)
    ,               reduce using rule 65 (value -> TRUE .)
    ]               reduce using rule 65 (value -> TRUE .)
    :               reduce using rule 65 (value -> TRUE .)
    ;               reduce using rule 65 (value -> TRUE .)


state 48

    (66) value -> FALSE .

    EQ              reduce using rule 66 (value -> FALSE .)
    GE              reduce using rule 66 (value -> FALSE .)
    >               reduce using rule 66 (value -> FALSE .)
    <               reduce using rule 66 (value -> FALSE .)
    LE              reduce using rule 66 (value -> FALSE .)
    +               reduce using rule 66 (value -> FALSE .)
    -               reduce using rule 66 (value -> FALSE .)
    *               reduce using rule 66 (value -> FALSE .)
    /               reduce using rule 66 (value -> FALSE .)
    )               reduce using rule 66 (value -> FALSE .)
    AND             reduce using rule 66 (value -> FALSE .)
    OR              reduce using rule 66 (value -> FALSE .)
    ?               reduce using rule 66 (value -> FALSE .)
    }               reduce using rule 66 (value -> FALSE .)
    ,               reduce using rule 66 (value -> FALSE .)
    ]               reduce using rule 66 (value -> FALSE .)
    :               reduce using rule 66 (value -> FALSE .)
    ;               reduce using rule 66 (value -> FALSE .)


state 49

    (17) edit -> NAME NAME .
    (20) edit -> NAME NAME . script
    (24) script -> . { statements }

    >               reduce using rule 17 (edit -> NAME NAME .)
    {               shift and go to state 19

    script                         shift and go to state 84

state 50

    (19) edit -> NAME script .

    >               reduce using rule 19 (edit -> NAME script .)


state 51

    (24) script -> { statements . }

    }               shift and go to state 85


state 52

    (25) statements -> statement .
    (26) statements -> statement . ; statements

    }               reduce using rule 25 (statements -> statement .)
    ;               shift and go to state 86


state 53

    (27) statement -> POP . var
    (61) var -> . NAME

    NAME            shift and go to state 55

    var                            shift and go to state 87

state 54

    (28) statement -> var . = expr
    (29) statement -> var . PE expr
    (30) statement -> var . ME expr
    (31) statement -> var . TE expr
    (32) statement -> var . DE expr

    =               shift and go to state 88
    PE              shift and go to state 89
    ME              shift and go to state 90
    TE              shift and go to state 91
    DE              shift and go to state 92


state 55

    (61) var -> NAME .

    =               reduce using rule 61 (var -> NAME .)
    PE              reduce using rule 61 (var -> NAME .)
    ME              reduce using rule 61 (var -> NAME .)
    TE              reduce using rule 61 (var -> NAME .)
    DE              reduce using rule 61 (var -> NAME .)
    ;               reduce using rule 61 (var -> NAME .)
    }               reduce using rule 61 (var -> NAME .)


state 56

    (23) replace -> NAME NAME . map
    (58) map -> . { mappings }

    {               shift and go to state 23

    map                            shift and go to state 93

state 57

    (22) replace -> NAME map .

    >               reduce using rule 22 (replace -> NAME map .)


state 58

    (58) map -> { mappings . }

    }               shift and go to state 94


state 59

    (59) mappings -> NAME . : expr , mappings
    (60) mappings -> NAME . : expr

    :               shift and go to state 95


state 60

    (11) transform -> FE filter edit .

    >               reduce using rule 11 (transform -> FE filter edit .)


state 61

    (12) transform -> FR filter replace .

    >               reduce using rule 12 (transform -> FR filter replace .)


state 62

    (15) filter -> NAME { test . }
    (53) test -> test . AND test
    (55) test -> test . OR test
    (33) expr -> test .
    (34) expr -> test . ? expr : expr

    }               shift and go to state 96
    AND             shift and go to state 64
    OR              shift and go to state 65
    EQ              reduce using rule 33 (expr -> test .)
    GE              reduce using rule 33 (expr -> test .)
    >               reduce using rule 33 (expr -> test .)
    <               reduce using rule 33 (expr -> test .)
    LE              reduce using rule 33 (expr -> test .)
    +               reduce using rule 33 (expr -> test .)
    -               reduce using rule 33 (expr -> test .)
    *               reduce using rule 33 (expr -> test .)
    /               reduce using rule 33 (expr -> test .)
    ?               shift and go to state 66


state 63

    (14) filter -> { test } .

    >               reduce using rule 14 (filter -> { test } .)
    NAME            reduce using rule 14 (filter -> { test } .)
    {               reduce using rule 14 (filter -> { test } .)


state 64

    (53) test -> test AND . test
    (47) test -> . expr EQ expr
    (48) test -> . expr GE expr
    (49) test -> . expr > expr
    (50) test -> . expr < expr
    (51) test -> . expr LE expr
    (52) test -> . ( test )
    (53) test -> . test AND test
    (54) test -> . ! test
    (55) test -> . test OR test
    (33) expr -> . test
    (34) expr -> . test ? expr : expr
    (35) expr -> . expr + expr
    (36) expr -> . expr - expr
    (37) expr -> . expr * expr
    (38) expr -> . expr / expr
    (39) expr -> . - expr
    (40) expr -> . list
    (42) expr -> . map
    (43) expr -> . ( expr )
    (44) expr -> . value
    (45) expr -> . NAME
    (46) expr -> . ID
    (41) list -> . [ expr_list ]
    (58) map -> . { mappings }
    (62) value -> . FLOAT
    (63) value -> . INT
    (64) value -> . STRING
    (65) value -> . TRUE
    (66) value -> . FALSE

    (               shift and go to state 35
    !               shift and go to state 36
    -               shift and go to state 37
    NAME            shift and go to state 41
    ID              shift and go to state 42
    [               shift and go to state 43
    {               shift and go to state 23
    FLOAT           shift and go to state 44
    INT             shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    test                           shift and go to state 97
    expr                           shift and go to state 34
    list                           shift and go to state 38
    map                            shift and go to state 39
    value                          shift and go to state 40

state 65

    (55) test -> test OR . test
    (47) test -> . expr EQ expr
    (48) test -> . expr GE expr
    (49) test -> . expr > expr
    (50) test -> . expr < expr
    (51) test -> . expr LE expr
    (52) test -> . ( test )
    (53) test -> . test AND test
    (54) test -> . ! test
    (55) test -> . test OR test
    (33) expr -> . test
    (34) expr -> . test ? expr : expr
    (35) expr -> . expr + expr
    (36) expr -> . expr - expr
    (37) expr -> . expr * expr
    (38) expr -> . expr / expr
    (39) expr -> . - expr
    (40) expr -> . list
    (42) expr -> . map
    (43) expr -> . ( expr )
    (44) expr -> . value
    (45) expr -> . NAME
    (46) expr -> . ID
    (41) list -> . [ expr_list ]
    (58) map -> . { mappings }
    (62) value -> . FLOAT
    (63) value -> . INT
    (64) value -> . STRING
    (65) value -> . TRUE
    (66) value -> . FALSE

    (               shift and go to state 35
    !               shift and go to state 36
    -               shift and go to state 37
    NAME            shift and go to state 41
    ID              shift and go to state 42
    [               shift and go to state 43
    {               shift and go to state 23
    FLOAT           shift and go to state 44
    INT             shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    test                           shift and go to state 98
    expr                           shift and go to state 34
    list                           shift and go to state 38
    map                            shift and go to state 39
    value                          shift and go to state 40

state 66

    (34) expr -> test ? . expr : expr
    (33) expr -> . test
    (34) expr -> . test ? expr : expr
    (35) expr -> . expr + expr
    (36) expr -> . expr - expr
    (37) expr -> . expr * expr
    (38) expr -> . expr / expr
    (39) expr -> . - expr
    (40) expr -> . list
    (42) expr -> . map
    (43) expr -> . ( expr )
    (44) expr -> . value
    (45) expr -> . NAME
    (46) expr -> . ID
    (47) test -> . expr EQ expr
    (48) test -> . expr GE expr
    (49) test -> . expr > expr
    (50) test -> . expr < expr
    (51) test -> . expr LE expr
    (52) test -> . ( test )
    (53) test -> . test AND test
    (54) test -> . ! test
    (55) test -> . test OR test
    (41) list -> . [ expr_list ]
    (58) map -> . { mappings }
    (62) value -> . FLOAT
    (63) value -> . INT
    (64) value -> . STRING
    (65) value -> . TRUE
    (66) value -> . FALSE

    -               shift and go to state 37
    (               shift and go to state 81
    NAME            shift and go to state 41
    ID              shift and go to state 42
    !               shift and go to state 36
    [               shift and go to state 43
    {               shift and go to state 23
    FLOAT           shift and go to state 44
    INT             shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    test                           shift and go to state 80
    expr                           shift and go to state 99
    list                           shift and go to state 38
    map                            shift and go to state 39
    value                          shift and go to state 40

state 67

    (47) test -> expr EQ . expr
    (33) expr -> . test
    (34) expr -> . test ? expr : expr
    (35) expr -> . expr + expr
    (36) expr -> . expr - expr
    (37) expr -> . expr * expr
    (38) expr -> . expr / expr
    (39) expr -> . - expr
    (40) expr -> . list
    (42) expr -> . map
    (43) expr -> . ( expr )
    (44) expr -> . value
    (45) expr -> . NAME
    (46) expr -> . ID
    (47) test -> . expr EQ expr
    (48) test -> . expr GE expr
    (49) test -> . expr > expr
    (50) test -> . expr < expr
    (51) test -> . expr LE expr
    (52) test -> . ( test )
    (53) test -> . test AND test
    (54) test -> . ! test
    (55) test -> . test OR test
    (41) list -> . [ expr_list ]
    (58) map -> . { mappings }
    (62) value -> . FLOAT
    (63) value -> . INT
    (64) value -> . STRING
    (65) value -> . TRUE
    (66) value -> . FALSE

    -               shift and go to state 37
    (               shift and go to state 81
    NAME            shift and go to state 41
    ID              shift and go to state 42
    !               shift and go to state 36
    [               shift and go to state 43
    {               shift and go to state 23
    FLOAT           shift and go to state 44
    INT             shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    expr                           shift and go to state 100
    test                           shift and go to state 80
    list                           shift and go to state 38
    map                            shift and go to state 39
    value                          shift and go to state 40

state 68

    (48) test -> expr GE . expr
    (33) expr -> . test
    (34) expr -> . test ? expr : expr
    (35) expr -> . expr + expr
    (36) expr -> . expr - expr
    (37) expr -> . expr * expr
    (38) expr -> . expr / expr
    (39) expr -> . - expr
    (40) expr -> . list
    (42) expr -> . map
    (43) expr -> . ( expr )
    (44) expr -> . value
    (45) expr -> . NAME
    (46) expr -> . ID
    (47) test -> . expr EQ expr
    (48) test -> . expr GE expr
    (49) test -> . expr > expr
    (50) test -> . expr < expr
    (51) test -> . expr LE expr
    (52) test -> . ( test )
    (53) test -> . test AND test
    (54) test -> . ! test
    (55) test -> . test OR test
    (41) list -> . [ expr_list ]
    (58) map -> . { mappings }
    (62) value -> . FLOAT
    (63) value -> . INT
    (64) value -> . STRING
    (65) value -> . TRUE
    (66) value -> . FALSE

    -               shift and go to state 37
    (               shift and go to state 81
    NAME            shift and go to state 41
    ID              shift and go to state 42
    !               shift and go to state 36
    [               shift and go to state 43
    {               shift and go to state 23
    FLOAT           shift and go to state 44
    INT             shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    expr                           shift and go to state 101
    test                           shift and go to state 80
    list                           shift and go to state 38
    map                            shift and go to state 39
    value                          shift and go to state 40

state 69

    (49) test -> expr > . expr
    (33) expr -> . test
    (34) expr -> . test ? expr : expr
    (35) expr -> . expr + expr
    (36) expr -> . expr - expr
    (37) expr -> . expr * expr
    (38) expr -> . expr / expr
    (39) expr -> . - expr
    (40) expr -> . list
    (42) expr -> . map
    (43) expr -> . ( expr )
    (44) expr -> . value
    (45) expr -> . NAME
    (46) expr -> . ID
    (47) test -> . expr EQ expr
    (48) test -> . expr GE expr
    (49) test -> . expr > expr
    (50) test -> . expr < expr
    (51) test -> . expr LE expr
    (52) test -> . ( test )
    (53) test -> . test AND test
    (54) test -> . ! test
    (55) test -> . test OR test
    (41) list -> . [ expr_list ]
    (58) map -> . { mappings }
    (62) value -> . FLOAT
    (63) value -> . INT
    (64) value -> . STRING
    (65) value -> . TRUE
    (66) value -> . FALSE

    -               shift and go to state 37
    (               shift and go to state 81
    NAME            shift and go to state 41
    ID              shift and go to state 42
    !               shift and go to state 36
    [               shift and go to state 43
    {               shift and go to state 23
    FLOAT           shift and go to state 44
    INT             shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    expr                           shift and go to state 102
    test                           shift and go to state 80
    list                           shift and go to state 38
    map                            shift and go to state 39
    value                          shift and go to state 40

state 70

    (50) test -> expr < . expr
    (33) expr -> . test
    (34) expr -> . test ? expr : expr
    (35) expr -> . expr + expr
    (36) expr -> . expr - expr
    (37) expr -> . expr * expr
    (38) expr -> . expr / expr
    (39) expr -> . - expr
    (40) expr -> . list
    (42) expr -> . map
    (43) expr -> . ( expr )
    (44) expr -> . value
    (45) expr -> . NAME
    (46) expr -> . ID
    (47) test -> . expr EQ expr
    (48) test -> . expr GE expr
    (49) test -> . expr > expr
    (50) test -> . expr < expr
    (51) test -> . expr LE expr
    (52) test -> . ( test )
    (53) test -> . test AND test
    (54) test -> . ! test
    (55) test -> . test OR test
    (41) list -> . [ expr_list ]
    (58) map -> . { mappings }
    (62) value -> . FLOAT
    (63) value -> . INT
    (64) value -> . STRING
    (65) value -> . TRUE
    (66) value -> . FALSE

    -               shift and go to state 37
    (               shift and go to state 81
    NAME            shift and go to state 41
    ID              shift and go to state 42
    !               shift and go to state 36
    [               shift and go to state 43
    {               shift and go to state 23
    FLOAT           shift and go to state 44
    INT             shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    expr                           shift and go to state 103
    test                           shift and go to state 80
    list                           shift and go to state 38
    map                            shift and go to state 39
    value                          shift and go to state 40

state 71

    (51) test -> expr LE . expr
    (33) expr -> . test
    (34) expr -> . test ? expr : expr
    (35) expr -> . expr + expr
    (36) expr -> . expr - expr
    (37) expr -> . expr * expr
    (38) expr -> . expr / expr
    (39) expr -> . - expr
    (40) expr -> . list
    (42) expr -> . map
    (43) expr -> . ( expr )
    (44) expr -> . value
    (45) expr -> . NAME
    (46) expr -> . ID
    (47) test -> . expr EQ expr
    (48) test -> . expr GE expr
    (49) test -> . expr > expr
    (50) test -> . expr < expr
    (51) test -> . expr LE expr
    (52) test -> . ( test )
    (53) test -> . test AND test
    (54) test -> . ! test
    (55) test -> . test OR test
    (41) list -> . [ expr_list ]
    (58) map -> . { mappings }
    (62) value -> . FLOAT
    (63) value -> . INT
    (64) value -> . STRING
    (65) value -> . TRUE
    (66) value -> . FALSE

    -               shift and go to state 37
    (               shift and go to state 81
    NAME            shift and go to state 41
    ID              shift and go to state 42
    !               shift and go to state 36
    [               shift and go to state 43
    {               shift and go to state 23
    FLOAT           shift and go to state 44
    INT             shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    expr                           shift and go to state 104
    test                           shift and go to state 80
    list                           shift and go to state 38
    map                            shift and go to state 39
    value                          shift and go to state 40

state 72

    (35) expr -> expr + . expr
    (33) expr -> . test
    (34) expr -> . test ? expr : expr
    (35) expr -> . expr + expr
    (36) expr -> . expr - expr
    (37) expr -> . expr * expr
    (38) expr -> . expr / expr
    (39) expr -> . - expr
    (40) expr -> . list
    (42) expr -> . map
    (43) expr -> . ( expr )
    (44) expr -> . value
    (45) expr -> . NAME
    (46) expr -> . ID
    (47) test -> . expr EQ expr
    (48) test -> . expr GE expr
    (49) test -> . expr > expr
    (50) test -> . expr < expr
    (51) test -> . expr LE expr
    (52) test -> . ( test )
    (53) test -> . test AND test
    (54) test -> . ! test
    (55) test -> . test OR test
    (41) list -> . [ expr_list ]
    (58) map -> . { mappings }
    (62) value -> . FLOAT
    (63) value -> . INT
    (64) value -> . STRING
    (65) value -> . TRUE
    (66) value -> . FALSE

    -               shift and go to state 37
    (               shift and go to state 81
    NAME            shift and go to state 41
    ID              shift and go to state 42
    !               shift and go to state 36
    [               shift and go to state 43
    {               shift and go to state 23
    FLOAT           shift and go to state 44
    INT             shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    expr                           shift and go to state 105
    test                           shift and go to state 80
    list                           shift and go to state 38
    map                            shift and go to state 39
    value                          shift and go to state 40

state 73

    (36) expr -> expr - . expr
    (33) expr -> . test
    (34) expr -> . test ? expr : expr
    (35) expr -> . expr + expr
    (36) expr -> . expr - expr
    (37) expr -> . expr * expr
    (38) expr -> . expr / expr
    (39) expr -> . - expr
    (40) expr -> . list
    (42) expr -> . map
    (43) expr -> . ( expr )
    (44) expr -> . value
    (45) expr -> . NAME
    (46) expr -> . ID
    (47) test -> . expr EQ expr
    (48) test -> . expr GE expr
    (49) test -> . expr > expr
    (50) test -> . expr < expr
    (51) test -> . expr LE expr
    (52) test -> . ( test )
    (53) test -> . test AND test
    (54) test -> . ! test
    (55) test -> . test OR test
    (41) list -> . [ expr_list ]
    (58) map -> . { mappings }
    (62) value -> . FLOAT
    (63) value -> . INT
    (64) value -> . STRING
    (65) value -> . TRUE
    (66) value -> . FALSE

    -               shift and go to state 37
    (               shift and go to state 81
    NAME            shift and go to state 41
    ID              shift and go to state 42
    !               shift and go to state 36
    [               shift and go to state 43
    {               shift and go to state 23
    FLOAT           shift and go to state 44
    INT             shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    expr                           shift and go to state 106
    test                           shift and go to state 80
    list                           shift and go to state 38
    map                            shift and go to state 39
    value                          shift and go to state 40

state 74

    (37) expr -> expr * . expr
    (33) expr -> . test
    (34) expr -> . test ? expr : expr
    (35) expr -> . expr + expr
    (36) expr -> . expr - expr
    (37) expr -> . expr * expr
    (38) expr -> . expr / expr
    (39) expr -> . - expr
    (40) expr -> . list
    (42) expr -> . map
    (43) expr -> . ( expr )
    (44) expr -> . value
    (45) expr -> . NAME
    (46) expr -> . ID
    (47) test -> . expr EQ expr
    (48) test -> . expr GE expr
    (49) test -> . expr > expr
    (50) test -> . expr < expr
    (51) test -> . expr LE expr
    (52) test -> . ( test )
    (53) test -> . test AND test
    (54) test -> . ! test
    (55) test -> . test OR test
    (41) list -> . [ expr_list ]
    (58) map -> . { mappings }
    (62) value -> . FLOAT
    (63) value -> . INT
    (64) value -> . STRING
    (65) value -> . TRUE
    (66) value -> . FALSE

    -               shift and go to state 37
    (               shift and go to state 81
    NAME            shift and go to state 41
    ID              shift and go to state 42
    !               shift and go to state 36
    [               shift and go to state 43
    {               shift and go to state 23
    FLOAT           shift and go to state 44
    INT             shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    expr                           shift and go to state 107
    test                           shift and go to state 80
    list                           shift and go to state 38
    map                            shift and go to state 39
    value                          shift and go to state 40

state 75

    (38) expr -> expr / . expr
    (33) expr -> . test
    (34) expr -> . test ? expr : expr
    (35) expr -> . expr + expr
    (36) expr -> . expr - expr
    (37) expr -> . expr * expr
    (38) expr -> . expr / expr
    (39) expr -> . - expr
    (40) expr -> . list
    (42) expr -> . map
    (43) expr -> . ( expr )
    (44) expr -> . value
    (45) expr -> . NAME
    (46) expr -> . ID
    (47) test -> . expr EQ expr
    (48) test -> . expr GE expr
    (49) test -> . expr > expr
    (50) test -> . expr < expr
    (51) test -> . expr LE expr
    (52) test -> . ( test )
    (53) test -> . test AND test
    (54) test -> . ! test
    (55) test -> . test OR test
    (41) list -> . [ expr_list ]
    (58) map -> . { mappings }
    (62) value -> . FLOAT
    (63) value -> . INT
    (64) value -> . STRING
    (65) value -> . TRUE
    (66) value -> . FALSE

    -               shift and go to state 37
    (               shift and go to state 81
    NAME            shift and go to state 41
    ID              shift and go to state 42
    !               shift and go to state 36
    [               shift and go to state 43
    {               shift and go to state 23
    FLOAT           shift and go to state 44
    INT             shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    expr                           shift and go to state 108
    test                           shift and go to state 80
    list                           shift and go to state 38
    map                            shift and go to state 39
    value                          shift and go to state 40

state 76

    (52) test -> ( test . )
    (53) test -> test . AND test
    (55) test -> test . OR test
    (33) expr -> test .
    (34) expr -> test . ? expr : expr

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 109
    AND             shift and go to state 64
    OR              shift and go to state 65
    EQ              reduce using rule 33 (expr -> test .)
    GE              reduce using rule 33 (expr -> test .)
    >               reduce using rule 33 (expr -> test .)
    <               reduce using rule 33 (expr -> test .)
    LE              reduce using rule 33 (expr -> test .)
    +               reduce using rule 33 (expr -> test .)
    -               reduce using rule 33 (expr -> test .)
    *               reduce using rule 33 (expr -> test .)
    /               reduce using rule 33 (expr -> test .)
    ?               shift and go to state 66

  ! )               [ reduce using rule 33 (expr -> test .) ]


state 77

    (43) expr -> ( expr . )
    (47) test -> expr . EQ expr
    (48) test -> expr . GE expr
    (49) test -> expr . > expr
    (50) test -> expr . < expr
    (51) test -> expr . LE expr
    (35) expr -> expr . + expr
    (36) expr -> expr . - expr
    (37) expr -> expr . * expr
    (38) expr -> expr . / expr

    )               shift and go to state 110
    EQ              shift and go to state 67
    GE              shift and go to state 68
    >               shift and go to state 69
    <               shift and go to state 70
    LE              shift and go to state 71
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75


state 78

    (54) test -> ! test .
    (53) test -> test . AND test
    (55) test -> test . OR test
    (33) expr -> test .
    (34) expr -> test . ? expr : expr

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! reduce/reduce conflict for EQ resolved using rule 33 (expr -> test .)
  ! reduce/reduce conflict for GE resolved using rule 33 (expr -> test .)
  ! reduce/reduce conflict for > resolved using rule 33 (expr -> test .)
  ! reduce/reduce conflict for < resolved using rule 33 (expr -> test .)
  ! reduce/reduce conflict for LE resolved using rule 33 (expr -> test .)
  ! reduce/reduce conflict for + resolved using rule 33 (expr -> test .)
  ! reduce/reduce conflict for - resolved using rule 33 (expr -> test .)
  ! reduce/reduce conflict for * resolved using rule 33 (expr -> test .)
  ! reduce/reduce conflict for / resolved using rule 33 (expr -> test .)
  ! shift/reduce conflict for ? resolved as shift
    }               reduce using rule 54 (test -> ! test .)
    )               reduce using rule 54 (test -> ! test .)
    ,               reduce using rule 54 (test -> ! test .)
    ]               reduce using rule 54 (test -> ! test .)
    :               reduce using rule 54 (test -> ! test .)
    ;               reduce using rule 54 (test -> ! test .)
    AND             shift and go to state 64
    OR              shift and go to state 65
    EQ              reduce using rule 33 (expr -> test .)
    GE              reduce using rule 33 (expr -> test .)
    >               reduce using rule 33 (expr -> test .)
    <               reduce using rule 33 (expr -> test .)
    LE              reduce using rule 33 (expr -> test .)
    +               reduce using rule 33 (expr -> test .)
    -               reduce using rule 33 (expr -> test .)
    *               reduce using rule 33 (expr -> test .)
    /               reduce using rule 33 (expr -> test .)
    ?               shift and go to state 66

  ! AND             [ reduce using rule 54 (test -> ! test .) ]
  ! OR              [ reduce using rule 54 (test -> ! test .) ]
  ! ?               [ reduce using rule 54 (test -> ! test .) ]
  ! EQ              [ reduce using rule 54 (test -> ! test .) ]
  ! GE              [ reduce using rule 54 (test -> ! test .) ]
  ! >               [ reduce using rule 54 (test -> ! test .) ]
  ! <               [ reduce using rule 54 (test -> ! test .) ]
  ! LE              [ reduce using rule 54 (test -> ! test .) ]
  ! +               [ reduce using rule 54 (test -> ! test .) ]
  ! -               [ reduce using rule 54 (test -> ! test .) ]
  ! *               [ reduce using rule 54 (test -> ! test .) ]
  ! /               [ reduce using rule 54 (test -> ! test .) ]


state 79

    (39) expr -> - expr .
    (35) expr -> expr . + expr
    (36) expr -> expr . - expr
    (37) expr -> expr . * expr
    (38) expr -> expr . / expr
    (47) test -> expr . EQ expr
    (48) test -> expr . GE expr
    (49) test -> expr . > expr
    (50) test -> expr . < expr
    (51) test -> expr . LE expr

    EQ              reduce using rule 39 (expr -> - expr .)
    GE              reduce using rule 39 (expr -> - expr .)
    >               reduce using rule 39 (expr -> - expr .)
    <               reduce using rule 39 (expr -> - expr .)
    LE              reduce using rule 39 (expr -> - expr .)
    +               reduce using rule 39 (expr -> - expr .)
    -               reduce using rule 39 (expr -> - expr .)
    *               reduce using rule 39 (expr -> - expr .)
    /               reduce using rule 39 (expr -> - expr .)
    )               reduce using rule 39 (expr -> - expr .)
    AND             reduce using rule 39 (expr -> - expr .)
    OR              reduce using rule 39 (expr -> - expr .)
    ?               reduce using rule 39 (expr -> - expr .)
    }               reduce using rule 39 (expr -> - expr .)
    ,               reduce using rule 39 (expr -> - expr .)
    ]               reduce using rule 39 (expr -> - expr .)
    :               reduce using rule 39 (expr -> - expr .)
    ;               reduce using rule 39 (expr -> - expr .)

  ! +               [ shift and go to state 72 ]
  ! -               [ shift and go to state 73 ]
  ! *               [ shift and go to state 74 ]
  ! /               [ shift and go to state 75 ]
  ! EQ              [ shift and go to state 67 ]
  ! GE              [ shift and go to state 68 ]
  ! >               [ shift and go to state 69 ]
  ! <               [ shift and go to state 70 ]
  ! LE              [ shift and go to state 71 ]


state 80

    (33) expr -> test .
    (34) expr -> test . ? expr : expr
    (53) test -> test . AND test
    (55) test -> test . OR test

  ! shift/reduce conflict for ? resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    }               reduce using rule 33 (expr -> test .)
    EQ              reduce using rule 33 (expr -> test .)
    GE              reduce using rule 33 (expr -> test .)
    >               reduce using rule 33 (expr -> test .)
    <               reduce using rule 33 (expr -> test .)
    LE              reduce using rule 33 (expr -> test .)
    +               reduce using rule 33 (expr -> test .)
    -               reduce using rule 33 (expr -> test .)
    *               reduce using rule 33 (expr -> test .)
    /               reduce using rule 33 (expr -> test .)
    )               reduce using rule 33 (expr -> test .)
    ,               reduce using rule 33 (expr -> test .)
    ]               reduce using rule 33 (expr -> test .)
    :               reduce using rule 33 (expr -> test .)
    ;               reduce using rule 33 (expr -> test .)
    ?               shift and go to state 66
    AND             shift and go to state 64
    OR              shift and go to state 65

  ! AND             [ reduce using rule 33 (expr -> test .) ]
  ! OR              [ reduce using rule 33 (expr -> test .) ]
  ! ?               [ reduce using rule 33 (expr -> test .) ]


state 81

    (43) expr -> ( . expr )
    (52) test -> ( . test )
    (33) expr -> . test
    (34) expr -> . test ? expr : expr
    (35) expr -> . expr + expr
    (36) expr -> . expr - expr
    (37) expr -> . expr * expr
    (38) expr -> . expr / expr
    (39) expr -> . - expr
    (40) expr -> . list
    (42) expr -> . map
    (43) expr -> . ( expr )
    (44) expr -> . value
    (45) expr -> . NAME
    (46) expr -> . ID
    (47) test -> . expr EQ expr
    (48) test -> . expr GE expr
    (49) test -> . expr > expr
    (50) test -> . expr < expr
    (51) test -> . expr LE expr
    (52) test -> . ( test )
    (53) test -> . test AND test
    (54) test -> . ! test
    (55) test -> . test OR test
    (41) list -> . [ expr_list ]
    (58) map -> . { mappings }
    (62) value -> . FLOAT
    (63) value -> . INT
    (64) value -> . STRING
    (65) value -> . TRUE
    (66) value -> . FALSE

    -               shift and go to state 37
    (               shift and go to state 81
    NAME            shift and go to state 41
    ID              shift and go to state 42
    !               shift and go to state 36
    [               shift and go to state 43
    {               shift and go to state 23
    FLOAT           shift and go to state 44
    INT             shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    expr                           shift and go to state 111
    test                           shift and go to state 112
    list                           shift and go to state 38
    map                            shift and go to state 39
    value                          shift and go to state 40

state 82

    (41) list -> [ expr_list . ]

    ]               shift and go to state 113


state 83

    (56) expr_list -> expr . , expr_list
    (57) expr_list -> expr .
    (35) expr -> expr . + expr
    (36) expr -> expr . - expr
    (37) expr -> expr . * expr
    (38) expr -> expr . / expr
    (47) test -> expr . EQ expr
    (48) test -> expr . GE expr
    (49) test -> expr . > expr
    (50) test -> expr . < expr
    (51) test -> expr . LE expr

    ,               shift and go to state 114
    ]               reduce using rule 57 (expr_list -> expr .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    EQ              shift and go to state 67
    GE              shift and go to state 68
    >               shift and go to state 69
    <               shift and go to state 70
    LE              shift and go to state 71


state 84

    (20) edit -> NAME NAME script .

    >               reduce using rule 20 (edit -> NAME NAME script .)


state 85

    (24) script -> { statements } .

    >               reduce using rule 24 (script -> { statements } .)


state 86

    (26) statements -> statement ; . statements
    (25) statements -> . statement
    (26) statements -> . statement ; statements
    (27) statement -> . POP var
    (28) statement -> . var = expr
    (29) statement -> . var PE expr
    (30) statement -> . var ME expr
    (31) statement -> . var TE expr
    (32) statement -> . var DE expr
    (61) var -> . NAME

    POP             shift and go to state 53
    NAME            shift and go to state 55

    statement                      shift and go to state 52
    statements                     shift and go to state 115
    var                            shift and go to state 54

state 87

    (27) statement -> POP var .

    ;               reduce using rule 27 (statement -> POP var .)
    }               reduce using rule 27 (statement -> POP var .)


state 88

    (28) statement -> var = . expr
    (33) expr -> . test
    (34) expr -> . test ? expr : expr
    (35) expr -> . expr + expr
    (36) expr -> . expr - expr
    (37) expr -> . expr * expr
    (38) expr -> . expr / expr
    (39) expr -> . - expr
    (40) expr -> . list
    (42) expr -> . map
    (43) expr -> . ( expr )
    (44) expr -> . value
    (45) expr -> . NAME
    (46) expr -> . ID
    (47) test -> . expr EQ expr
    (48) test -> . expr GE expr
    (49) test -> . expr > expr
    (50) test -> . expr < expr
    (51) test -> . expr LE expr
    (52) test -> . ( test )
    (53) test -> . test AND test
    (54) test -> . ! test
    (55) test -> . test OR test
    (41) list -> . [ expr_list ]
    (58) map -> . { mappings }
    (62) value -> . FLOAT
    (63) value -> . INT
    (64) value -> . STRING
    (65) value -> . TRUE
    (66) value -> . FALSE

    -               shift and go to state 37
    (               shift and go to state 81
    NAME            shift and go to state 41
    ID              shift and go to state 42
    !               shift and go to state 36
    [               shift and go to state 43
    {               shift and go to state 23
    FLOAT           shift and go to state 44
    INT             shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    expr                           shift and go to state 116
    test                           shift and go to state 80
    list                           shift and go to state 38
    map                            shift and go to state 39
    value                          shift and go to state 40

state 89

    (29) statement -> var PE . expr
    (33) expr -> . test
    (34) expr -> . test ? expr : expr
    (35) expr -> . expr + expr
    (36) expr -> . expr - expr
    (37) expr -> . expr * expr
    (38) expr -> . expr / expr
    (39) expr -> . - expr
    (40) expr -> . list
    (42) expr -> . map
    (43) expr -> . ( expr )
    (44) expr -> . value
    (45) expr -> . NAME
    (46) expr -> . ID
    (47) test -> . expr EQ expr
    (48) test -> . expr GE expr
    (49) test -> . expr > expr
    (50) test -> . expr < expr
    (51) test -> . expr LE expr
    (52) test -> . ( test )
    (53) test -> . test AND test
    (54) test -> . ! test
    (55) test -> . test OR test
    (41) list -> . [ expr_list ]
    (58) map -> . { mappings }
    (62) value -> . FLOAT
    (63) value -> . INT
    (64) value -> . STRING
    (65) value -> . TRUE
    (66) value -> . FALSE

    -               shift and go to state 37
    (               shift and go to state 81
    NAME            shift and go to state 41
    ID              shift and go to state 42
    !               shift and go to state 36
    [               shift and go to state 43
    {               shift and go to state 23
    FLOAT           shift and go to state 44
    INT             shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    expr                           shift and go to state 117
    test                           shift and go to state 80
    list                           shift and go to state 38
    map                            shift and go to state 39
    value                          shift and go to state 40

state 90

    (30) statement -> var ME . expr
    (33) expr -> . test
    (34) expr -> . test ? expr : expr
    (35) expr -> . expr + expr
    (36) expr -> . expr - expr
    (37) expr -> . expr * expr
    (38) expr -> . expr / expr
    (39) expr -> . - expr
    (40) expr -> . list
    (42) expr -> . map
    (43) expr -> . ( expr )
    (44) expr -> . value
    (45) expr -> . NAME
    (46) expr -> . ID
    (47) test -> . expr EQ expr
    (48) test -> . expr GE expr
    (49) test -> . expr > expr
    (50) test -> . expr < expr
    (51) test -> . expr LE expr
    (52) test -> . ( test )
    (53) test -> . test AND test
    (54) test -> . ! test
    (55) test -> . test OR test
    (41) list -> . [ expr_list ]
    (58) map -> . { mappings }
    (62) value -> . FLOAT
    (63) value -> . INT
    (64) value -> . STRING
    (65) value -> . TRUE
    (66) value -> . FALSE

    -               shift and go to state 37
    (               shift and go to state 81
    NAME            shift and go to state 41
    ID              shift and go to state 42
    !               shift and go to state 36
    [               shift and go to state 43
    {               shift and go to state 23
    FLOAT           shift and go to state 44
    INT             shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    expr                           shift and go to state 118
    test                           shift and go to state 80
    list                           shift and go to state 38
    map                            shift and go to state 39
    value                          shift and go to state 40

state 91

    (31) statement -> var TE . expr
    (33) expr -> . test
    (34) expr -> . test ? expr : expr
    (35) expr -> . expr + expr
    (36) expr -> . expr - expr
    (37) expr -> . expr * expr
    (38) expr -> . expr / expr
    (39) expr -> . - expr
    (40) expr -> . list
    (42) expr -> . map
    (43) expr -> . ( expr )
    (44) expr -> . value
    (45) expr -> . NAME
    (46) expr -> . ID
    (47) test -> . expr EQ expr
    (48) test -> . expr GE expr
    (49) test -> . expr > expr
    (50) test -> . expr < expr
    (51) test -> . expr LE expr
    (52) test -> . ( test )
    (53) test -> . test AND test
    (54) test -> . ! test
    (55) test -> . test OR test
    (41) list -> . [ expr_list ]
    (58) map -> . { mappings }
    (62) value -> . FLOAT
    (63) value -> . INT
    (64) value -> . STRING
    (65) value -> . TRUE
    (66) value -> . FALSE

    -               shift and go to state 37
    (               shift and go to state 81
    NAME            shift and go to state 41
    ID              shift and go to state 42
    !               shift and go to state 36
    [               shift and go to state 43
    {               shift and go to state 23
    FLOAT           shift and go to state 44
    INT             shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    expr                           shift and go to state 119
    test                           shift and go to state 80
    list                           shift and go to state 38
    map                            shift and go to state 39
    value                          shift and go to state 40

state 92

    (32) statement -> var DE . expr
    (33) expr -> . test
    (34) expr -> . test ? expr : expr
    (35) expr -> . expr + expr
    (36) expr -> . expr - expr
    (37) expr -> . expr * expr
    (38) expr -> . expr / expr
    (39) expr -> . - expr
    (40) expr -> . list
    (42) expr -> . map
    (43) expr -> . ( expr )
    (44) expr -> . value
    (45) expr -> . NAME
    (46) expr -> . ID
    (47) test -> . expr EQ expr
    (48) test -> . expr GE expr
    (49) test -> . expr > expr
    (50) test -> . expr < expr
    (51) test -> . expr LE expr
    (52) test -> . ( test )
    (53) test -> . test AND test
    (54) test -> . ! test
    (55) test -> . test OR test
    (41) list -> . [ expr_list ]
    (58) map -> . { mappings }
    (62) value -> . FLOAT
    (63) value -> . INT
    (64) value -> . STRING
    (65) value -> . TRUE
    (66) value -> . FALSE

    -               shift and go to state 37
    (               shift and go to state 81
    NAME            shift and go to state 41
    ID              shift and go to state 42
    !               shift and go to state 36
    [               shift and go to state 43
    {               shift and go to state 23
    FLOAT           shift and go to state 44
    INT             shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    expr                           shift and go to state 120
    test                           shift and go to state 80
    list                           shift and go to state 38
    map                            shift and go to state 39
    value                          shift and go to state 40

state 93

    (23) replace -> NAME NAME map .

    >               reduce using rule 23 (replace -> NAME NAME map .)


state 94

    (58) map -> { mappings } .

    >               reduce using rule 58 (map -> { mappings } .)
    EQ              reduce using rule 58 (map -> { mappings } .)
    GE              reduce using rule 58 (map -> { mappings } .)
    <               reduce using rule 58 (map -> { mappings } .)
    LE              reduce using rule 58 (map -> { mappings } .)
    +               reduce using rule 58 (map -> { mappings } .)
    -               reduce using rule 58 (map -> { mappings } .)
    *               reduce using rule 58 (map -> { mappings } .)
    /               reduce using rule 58 (map -> { mappings } .)
    )               reduce using rule 58 (map -> { mappings } .)
    AND             reduce using rule 58 (map -> { mappings } .)
    OR              reduce using rule 58 (map -> { mappings } .)
    ?               reduce using rule 58 (map -> { mappings } .)
    }               reduce using rule 58 (map -> { mappings } .)
    ,               reduce using rule 58 (map -> { mappings } .)
    ]               reduce using rule 58 (map -> { mappings } .)
    :               reduce using rule 58 (map -> { mappings } .)
    ;               reduce using rule 58 (map -> { mappings } .)


state 95

    (59) mappings -> NAME : . expr , mappings
    (60) mappings -> NAME : . expr
    (33) expr -> . test
    (34) expr -> . test ? expr : expr
    (35) expr -> . expr + expr
    (36) expr -> . expr - expr
    (37) expr -> . expr * expr
    (38) expr -> . expr / expr
    (39) expr -> . - expr
    (40) expr -> . list
    (42) expr -> . map
    (43) expr -> . ( expr )
    (44) expr -> . value
    (45) expr -> . NAME
    (46) expr -> . ID
    (47) test -> . expr EQ expr
    (48) test -> . expr GE expr
    (49) test -> . expr > expr
    (50) test -> . expr < expr
    (51) test -> . expr LE expr
    (52) test -> . ( test )
    (53) test -> . test AND test
    (54) test -> . ! test
    (55) test -> . test OR test
    (41) list -> . [ expr_list ]
    (58) map -> . { mappings }
    (62) value -> . FLOAT
    (63) value -> . INT
    (64) value -> . STRING
    (65) value -> . TRUE
    (66) value -> . FALSE

    -               shift and go to state 37
    (               shift and go to state 81
    NAME            shift and go to state 41
    ID              shift and go to state 42
    !               shift and go to state 36
    [               shift and go to state 43
    {               shift and go to state 23
    FLOAT           shift and go to state 44
    INT             shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    expr                           shift and go to state 121
    test                           shift and go to state 80
    list                           shift and go to state 38
    map                            shift and go to state 39
    value                          shift and go to state 40

state 96

    (15) filter -> NAME { test } .

    >               reduce using rule 15 (filter -> NAME { test } .)
    NAME            reduce using rule 15 (filter -> NAME { test } .)
    {               reduce using rule 15 (filter -> NAME { test } .)


state 97

    (53) test -> test AND test .
    (53) test -> test . AND test
    (55) test -> test . OR test
    (33) expr -> test .
    (34) expr -> test . ? expr : expr

  ! reduce/reduce conflict for EQ resolved using rule 33 (expr -> test .)
  ! reduce/reduce conflict for GE resolved using rule 33 (expr -> test .)
  ! reduce/reduce conflict for > resolved using rule 33 (expr -> test .)
  ! reduce/reduce conflict for < resolved using rule 33 (expr -> test .)
  ! reduce/reduce conflict for LE resolved using rule 33 (expr -> test .)
  ! reduce/reduce conflict for + resolved using rule 33 (expr -> test .)
  ! reduce/reduce conflict for - resolved using rule 33 (expr -> test .)
  ! reduce/reduce conflict for * resolved using rule 33 (expr -> test .)
  ! reduce/reduce conflict for / resolved using rule 33 (expr -> test .)
    }               reduce using rule 53 (test -> test AND test .)
    AND             reduce using rule 53 (test -> test AND test .)
    OR              reduce using rule 53 (test -> test AND test .)
    ?               reduce using rule 53 (test -> test AND test .)
    )               reduce using rule 53 (test -> test AND test .)
    ,               reduce using rule 53 (test -> test AND test .)
    ]               reduce using rule 53 (test -> test AND test .)
    :               reduce using rule 53 (test -> test AND test .)
    ;               reduce using rule 53 (test -> test AND test .)
    EQ              reduce using rule 33 (expr -> test .)
    GE              reduce using rule 33 (expr -> test .)
    >               reduce using rule 33 (expr -> test .)
    <               reduce using rule 33 (expr -> test .)
    LE              reduce using rule 33 (expr -> test .)
    +               reduce using rule 33 (expr -> test .)
    -               reduce using rule 33 (expr -> test .)
    *               reduce using rule 33 (expr -> test .)
    /               reduce using rule 33 (expr -> test .)

  ! EQ              [ reduce using rule 53 (test -> test AND test .) ]
  ! GE              [ reduce using rule 53 (test -> test AND test .) ]
  ! >               [ reduce using rule 53 (test -> test AND test .) ]
  ! <               [ reduce using rule 53 (test -> test AND test .) ]
  ! LE              [ reduce using rule 53 (test -> test AND test .) ]
  ! +               [ reduce using rule 53 (test -> test AND test .) ]
  ! -               [ reduce using rule 53 (test -> test AND test .) ]
  ! *               [ reduce using rule 53 (test -> test AND test .) ]
  ! /               [ reduce using rule 53 (test -> test AND test .) ]
  ! AND             [ shift and go to state 64 ]
  ! OR              [ shift and go to state 65 ]
  ! ?               [ shift and go to state 66 ]


state 98

    (55) test -> test OR test .
    (53) test -> test . AND test
    (55) test -> test . OR test
    (33) expr -> test .
    (34) expr -> test . ? expr : expr

  ! reduce/reduce conflict for EQ resolved using rule 33 (expr -> test .)
  ! reduce/reduce conflict for GE resolved using rule 33 (expr -> test .)
  ! reduce/reduce conflict for > resolved using rule 33 (expr -> test .)
  ! reduce/reduce conflict for < resolved using rule 33 (expr -> test .)
  ! reduce/reduce conflict for LE resolved using rule 33 (expr -> test .)
  ! reduce/reduce conflict for + resolved using rule 33 (expr -> test .)
  ! reduce/reduce conflict for - resolved using rule 33 (expr -> test .)
  ! reduce/reduce conflict for * resolved using rule 33 (expr -> test .)
  ! reduce/reduce conflict for / resolved using rule 33 (expr -> test .)
    }               reduce using rule 55 (test -> test OR test .)
    AND             reduce using rule 55 (test -> test OR test .)
    OR              reduce using rule 55 (test -> test OR test .)
    ?               reduce using rule 55 (test -> test OR test .)
    )               reduce using rule 55 (test -> test OR test .)
    ,               reduce using rule 55 (test -> test OR test .)
    ]               reduce using rule 55 (test -> test OR test .)
    :               reduce using rule 55 (test -> test OR test .)
    ;               reduce using rule 55 (test -> test OR test .)
    EQ              reduce using rule 33 (expr -> test .)
    GE              reduce using rule 33 (expr -> test .)
    >               reduce using rule 33 (expr -> test .)
    <               reduce using rule 33 (expr -> test .)
    LE              reduce using rule 33 (expr -> test .)
    +               reduce using rule 33 (expr -> test .)
    -               reduce using rule 33 (expr -> test .)
    *               reduce using rule 33 (expr -> test .)
    /               reduce using rule 33 (expr -> test .)

  ! EQ              [ reduce using rule 55 (test -> test OR test .) ]
  ! GE              [ reduce using rule 55 (test -> test OR test .) ]
  ! >               [ reduce using rule 55 (test -> test OR test .) ]
  ! <               [ reduce using rule 55 (test -> test OR test .) ]
  ! LE              [ reduce using rule 55 (test -> test OR test .) ]
  ! +               [ reduce using rule 55 (test -> test OR test .) ]
  ! -               [ reduce using rule 55 (test -> test OR test .) ]
  ! *               [ reduce using rule 55 (test -> test OR test .) ]
  ! /               [ reduce using rule 55 (test -> test OR test .) ]
  ! AND             [ shift and go to state 64 ]
  ! OR              [ shift and go to state 65 ]
  ! ?               [ shift and go to state 66 ]


state 99

    (34) expr -> test ? expr . : expr
    (35) expr -> expr . + expr
    (36) expr -> expr . - expr
    (37) expr -> expr . * expr
    (38) expr -> expr . / expr
    (47) test -> expr . EQ expr
    (48) test -> expr . GE expr
    (49) test -> expr . > expr
    (50) test -> expr . < expr
    (51) test -> expr . LE expr

    :               shift and go to state 122
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    EQ              shift and go to state 67
    GE              shift and go to state 68
    >               shift and go to state 69
    <               shift and go to state 70
    LE              shift and go to state 71


state 100

    (47) test -> expr EQ expr .
    (35) expr -> expr . + expr
    (36) expr -> expr . - expr
    (37) expr -> expr . * expr
    (38) expr -> expr . / expr
    (47) test -> expr . EQ expr
    (48) test -> expr . GE expr
    (49) test -> expr . > expr
    (50) test -> expr . < expr
    (51) test -> expr . LE expr

    }               reduce using rule 47 (test -> expr EQ expr .)
    AND             reduce using rule 47 (test -> expr EQ expr .)
    OR              reduce using rule 47 (test -> expr EQ expr .)
    ?               reduce using rule 47 (test -> expr EQ expr .)
    EQ              reduce using rule 47 (test -> expr EQ expr .)
    GE              reduce using rule 47 (test -> expr EQ expr .)
    >               reduce using rule 47 (test -> expr EQ expr .)
    <               reduce using rule 47 (test -> expr EQ expr .)
    LE              reduce using rule 47 (test -> expr EQ expr .)
    )               reduce using rule 47 (test -> expr EQ expr .)
    ,               reduce using rule 47 (test -> expr EQ expr .)
    ]               reduce using rule 47 (test -> expr EQ expr .)
    :               reduce using rule 47 (test -> expr EQ expr .)
    ;               reduce using rule 47 (test -> expr EQ expr .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75

  ! +               [ reduce using rule 47 (test -> expr EQ expr .) ]
  ! -               [ reduce using rule 47 (test -> expr EQ expr .) ]
  ! *               [ reduce using rule 47 (test -> expr EQ expr .) ]
  ! /               [ reduce using rule 47 (test -> expr EQ expr .) ]
  ! EQ              [ shift and go to state 67 ]
  ! GE              [ shift and go to state 68 ]
  ! >               [ shift and go to state 69 ]
  ! <               [ shift and go to state 70 ]
  ! LE              [ shift and go to state 71 ]


state 101

    (48) test -> expr GE expr .
    (35) expr -> expr . + expr
    (36) expr -> expr . - expr
    (37) expr -> expr . * expr
    (38) expr -> expr . / expr
    (47) test -> expr . EQ expr
    (48) test -> expr . GE expr
    (49) test -> expr . > expr
    (50) test -> expr . < expr
    (51) test -> expr . LE expr

    }               reduce using rule 48 (test -> expr GE expr .)
    AND             reduce using rule 48 (test -> expr GE expr .)
    OR              reduce using rule 48 (test -> expr GE expr .)
    ?               reduce using rule 48 (test -> expr GE expr .)
    EQ              reduce using rule 48 (test -> expr GE expr .)
    GE              reduce using rule 48 (test -> expr GE expr .)
    >               reduce using rule 48 (test -> expr GE expr .)
    <               reduce using rule 48 (test -> expr GE expr .)
    LE              reduce using rule 48 (test -> expr GE expr .)
    )               reduce using rule 48 (test -> expr GE expr .)
    ,               reduce using rule 48 (test -> expr GE expr .)
    ]               reduce using rule 48 (test -> expr GE expr .)
    :               reduce using rule 48 (test -> expr GE expr .)
    ;               reduce using rule 48 (test -> expr GE expr .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75

  ! +               [ reduce using rule 48 (test -> expr GE expr .) ]
  ! -               [ reduce using rule 48 (test -> expr GE expr .) ]
  ! *               [ reduce using rule 48 (test -> expr GE expr .) ]
  ! /               [ reduce using rule 48 (test -> expr GE expr .) ]
  ! EQ              [ shift and go to state 67 ]
  ! GE              [ shift and go to state 68 ]
  ! >               [ shift and go to state 69 ]
  ! <               [ shift and go to state 70 ]
  ! LE              [ shift and go to state 71 ]


state 102

    (49) test -> expr > expr .
    (35) expr -> expr . + expr
    (36) expr -> expr . - expr
    (37) expr -> expr . * expr
    (38) expr -> expr . / expr
    (47) test -> expr . EQ expr
    (48) test -> expr . GE expr
    (49) test -> expr . > expr
    (50) test -> expr . < expr
    (51) test -> expr . LE expr

    }               reduce using rule 49 (test -> expr > expr .)
    AND             reduce using rule 49 (test -> expr > expr .)
    OR              reduce using rule 49 (test -> expr > expr .)
    ?               reduce using rule 49 (test -> expr > expr .)
    EQ              reduce using rule 49 (test -> expr > expr .)
    GE              reduce using rule 49 (test -> expr > expr .)
    >               reduce using rule 49 (test -> expr > expr .)
    <               reduce using rule 49 (test -> expr > expr .)
    LE              reduce using rule 49 (test -> expr > expr .)
    )               reduce using rule 49 (test -> expr > expr .)
    ,               reduce using rule 49 (test -> expr > expr .)
    ]               reduce using rule 49 (test -> expr > expr .)
    :               reduce using rule 49 (test -> expr > expr .)
    ;               reduce using rule 49 (test -> expr > expr .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75

  ! +               [ reduce using rule 49 (test -> expr > expr .) ]
  ! -               [ reduce using rule 49 (test -> expr > expr .) ]
  ! *               [ reduce using rule 49 (test -> expr > expr .) ]
  ! /               [ reduce using rule 49 (test -> expr > expr .) ]
  ! EQ              [ shift and go to state 67 ]
  ! GE              [ shift and go to state 68 ]
  ! >               [ shift and go to state 69 ]
  ! <               [ shift and go to state 70 ]
  ! LE              [ shift and go to state 71 ]


state 103

    (50) test -> expr < expr .
    (35) expr -> expr . + expr
    (36) expr -> expr . - expr
    (37) expr -> expr . * expr
    (38) expr -> expr . / expr
    (47) test -> expr . EQ expr
    (48) test -> expr . GE expr
    (49) test -> expr . > expr
    (50) test -> expr . < expr
    (51) test -> expr . LE expr

    }               reduce using rule 50 (test -> expr < expr .)
    AND             reduce using rule 50 (test -> expr < expr .)
    OR              reduce using rule 50 (test -> expr < expr .)
    ?               reduce using rule 50 (test -> expr < expr .)
    EQ              reduce using rule 50 (test -> expr < expr .)
    GE              reduce using rule 50 (test -> expr < expr .)
    >               reduce using rule 50 (test -> expr < expr .)
    <               reduce using rule 50 (test -> expr < expr .)
    LE              reduce using rule 50 (test -> expr < expr .)
    )               reduce using rule 50 (test -> expr < expr .)
    ,               reduce using rule 50 (test -> expr < expr .)
    ]               reduce using rule 50 (test -> expr < expr .)
    :               reduce using rule 50 (test -> expr < expr .)
    ;               reduce using rule 50 (test -> expr < expr .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75

  ! +               [ reduce using rule 50 (test -> expr < expr .) ]
  ! -               [ reduce using rule 50 (test -> expr < expr .) ]
  ! *               [ reduce using rule 50 (test -> expr < expr .) ]
  ! /               [ reduce using rule 50 (test -> expr < expr .) ]
  ! EQ              [ shift and go to state 67 ]
  ! GE              [ shift and go to state 68 ]
  ! >               [ shift and go to state 69 ]
  ! <               [ shift and go to state 70 ]
  ! LE              [ shift and go to state 71 ]


state 104

    (51) test -> expr LE expr .
    (35) expr -> expr . + expr
    (36) expr -> expr . - expr
    (37) expr -> expr . * expr
    (38) expr -> expr . / expr
    (47) test -> expr . EQ expr
    (48) test -> expr . GE expr
    (49) test -> expr . > expr
    (50) test -> expr . < expr
    (51) test -> expr . LE expr

    }               reduce using rule 51 (test -> expr LE expr .)
    AND             reduce using rule 51 (test -> expr LE expr .)
    OR              reduce using rule 51 (test -> expr LE expr .)
    ?               reduce using rule 51 (test -> expr LE expr .)
    EQ              reduce using rule 51 (test -> expr LE expr .)
    GE              reduce using rule 51 (test -> expr LE expr .)
    >               reduce using rule 51 (test -> expr LE expr .)
    <               reduce using rule 51 (test -> expr LE expr .)
    LE              reduce using rule 51 (test -> expr LE expr .)
    )               reduce using rule 51 (test -> expr LE expr .)
    ,               reduce using rule 51 (test -> expr LE expr .)
    ]               reduce using rule 51 (test -> expr LE expr .)
    :               reduce using rule 51 (test -> expr LE expr .)
    ;               reduce using rule 51 (test -> expr LE expr .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75

  ! +               [ reduce using rule 51 (test -> expr LE expr .) ]
  ! -               [ reduce using rule 51 (test -> expr LE expr .) ]
  ! *               [ reduce using rule 51 (test -> expr LE expr .) ]
  ! /               [ reduce using rule 51 (test -> expr LE expr .) ]
  ! EQ              [ shift and go to state 67 ]
  ! GE              [ shift and go to state 68 ]
  ! >               [ shift and go to state 69 ]
  ! <               [ shift and go to state 70 ]
  ! LE              [ shift and go to state 71 ]


state 105

    (35) expr -> expr + expr .
    (35) expr -> expr . + expr
    (36) expr -> expr . - expr
    (37) expr -> expr . * expr
    (38) expr -> expr . / expr
    (47) test -> expr . EQ expr
    (48) test -> expr . GE expr
    (49) test -> expr . > expr
    (50) test -> expr . < expr
    (51) test -> expr . LE expr

    EQ              reduce using rule 35 (expr -> expr + expr .)
    GE              reduce using rule 35 (expr -> expr + expr .)
    >               reduce using rule 35 (expr -> expr + expr .)
    <               reduce using rule 35 (expr -> expr + expr .)
    LE              reduce using rule 35 (expr -> expr + expr .)
    +               reduce using rule 35 (expr -> expr + expr .)
    -               reduce using rule 35 (expr -> expr + expr .)
    )               reduce using rule 35 (expr -> expr + expr .)
    AND             reduce using rule 35 (expr -> expr + expr .)
    OR              reduce using rule 35 (expr -> expr + expr .)
    ?               reduce using rule 35 (expr -> expr + expr .)
    }               reduce using rule 35 (expr -> expr + expr .)
    ,               reduce using rule 35 (expr -> expr + expr .)
    ]               reduce using rule 35 (expr -> expr + expr .)
    :               reduce using rule 35 (expr -> expr + expr .)
    ;               reduce using rule 35 (expr -> expr + expr .)
    *               shift and go to state 74
    /               shift and go to state 75

  ! *               [ reduce using rule 35 (expr -> expr + expr .) ]
  ! /               [ reduce using rule 35 (expr -> expr + expr .) ]
  ! +               [ shift and go to state 72 ]
  ! -               [ shift and go to state 73 ]
  ! EQ              [ shift and go to state 67 ]
  ! GE              [ shift and go to state 68 ]
  ! >               [ shift and go to state 69 ]
  ! <               [ shift and go to state 70 ]
  ! LE              [ shift and go to state 71 ]


state 106

    (36) expr -> expr - expr .
    (35) expr -> expr . + expr
    (36) expr -> expr . - expr
    (37) expr -> expr . * expr
    (38) expr -> expr . / expr
    (47) test -> expr . EQ expr
    (48) test -> expr . GE expr
    (49) test -> expr . > expr
    (50) test -> expr . < expr
    (51) test -> expr . LE expr

    EQ              reduce using rule 36 (expr -> expr - expr .)
    GE              reduce using rule 36 (expr -> expr - expr .)
    >               reduce using rule 36 (expr -> expr - expr .)
    <               reduce using rule 36 (expr -> expr - expr .)
    LE              reduce using rule 36 (expr -> expr - expr .)
    +               reduce using rule 36 (expr -> expr - expr .)
    -               reduce using rule 36 (expr -> expr - expr .)
    )               reduce using rule 36 (expr -> expr - expr .)
    AND             reduce using rule 36 (expr -> expr - expr .)
    OR              reduce using rule 36 (expr -> expr - expr .)
    ?               reduce using rule 36 (expr -> expr - expr .)
    }               reduce using rule 36 (expr -> expr - expr .)
    ,               reduce using rule 36 (expr -> expr - expr .)
    ]               reduce using rule 36 (expr -> expr - expr .)
    :               reduce using rule 36 (expr -> expr - expr .)
    ;               reduce using rule 36 (expr -> expr - expr .)
    *               shift and go to state 74
    /               shift and go to state 75

  ! *               [ reduce using rule 36 (expr -> expr - expr .) ]
  ! /               [ reduce using rule 36 (expr -> expr - expr .) ]
  ! +               [ shift and go to state 72 ]
  ! -               [ shift and go to state 73 ]
  ! EQ              [ shift and go to state 67 ]
  ! GE              [ shift and go to state 68 ]
  ! >               [ shift and go to state 69 ]
  ! <               [ shift and go to state 70 ]
  ! LE              [ shift and go to state 71 ]


state 107

    (37) expr -> expr * expr .
    (35) expr -> expr . + expr
    (36) expr -> expr . - expr
    (37) expr -> expr . * expr
    (38) expr -> expr . / expr
    (47) test -> expr . EQ expr
    (48) test -> expr . GE expr
    (49) test -> expr . > expr
    (50) test -> expr . < expr
    (51) test -> expr . LE expr

    EQ              reduce using rule 37 (expr -> expr * expr .)
    GE              reduce using rule 37 (expr -> expr * expr .)
    >               reduce using rule 37 (expr -> expr * expr .)
    <               reduce using rule 37 (expr -> expr * expr .)
    LE              reduce using rule 37 (expr -> expr * expr .)
    +               reduce using rule 37 (expr -> expr * expr .)
    -               reduce using rule 37 (expr -> expr * expr .)
    *               reduce using rule 37 (expr -> expr * expr .)
    /               reduce using rule 37 (expr -> expr * expr .)
    )               reduce using rule 37 (expr -> expr * expr .)
    AND             reduce using rule 37 (expr -> expr * expr .)
    OR              reduce using rule 37 (expr -> expr * expr .)
    ?               reduce using rule 37 (expr -> expr * expr .)
    }               reduce using rule 37 (expr -> expr * expr .)
    ,               reduce using rule 37 (expr -> expr * expr .)
    ]               reduce using rule 37 (expr -> expr * expr .)
    :               reduce using rule 37 (expr -> expr * expr .)
    ;               reduce using rule 37 (expr -> expr * expr .)

  ! +               [ shift and go to state 72 ]
  ! -               [ shift and go to state 73 ]
  ! *               [ shift and go to state 74 ]
  ! /               [ shift and go to state 75 ]
  ! EQ              [ shift and go to state 67 ]
  ! GE              [ shift and go to state 68 ]
  ! >               [ shift and go to state 69 ]
  ! <               [ shift and go to state 70 ]
  ! LE              [ shift and go to state 71 ]


state 108

    (38) expr -> expr / expr .
    (35) expr -> expr . + expr
    (36) expr -> expr . - expr
    (37) expr -> expr . * expr
    (38) expr -> expr . / expr
    (47) test -> expr . EQ expr
    (48) test -> expr . GE expr
    (49) test -> expr . > expr
    (50) test -> expr . < expr
    (51) test -> expr . LE expr

    EQ              reduce using rule 38 (expr -> expr / expr .)
    GE              reduce using rule 38 (expr -> expr / expr .)
    >               reduce using rule 38 (expr -> expr / expr .)
    <               reduce using rule 38 (expr -> expr / expr .)
    LE              reduce using rule 38 (expr -> expr / expr .)
    +               reduce using rule 38 (expr -> expr / expr .)
    -               reduce using rule 38 (expr -> expr / expr .)
    *               reduce using rule 38 (expr -> expr / expr .)
    /               reduce using rule 38 (expr -> expr / expr .)
    )               reduce using rule 38 (expr -> expr / expr .)
    AND             reduce using rule 38 (expr -> expr / expr .)
    OR              reduce using rule 38 (expr -> expr / expr .)
    ?               reduce using rule 38 (expr -> expr / expr .)
    }               reduce using rule 38 (expr -> expr / expr .)
    ,               reduce using rule 38 (expr -> expr / expr .)
    ]               reduce using rule 38 (expr -> expr / expr .)
    :               reduce using rule 38 (expr -> expr / expr .)
    ;               reduce using rule 38 (expr -> expr / expr .)

  ! +               [ shift and go to state 72 ]
  ! -               [ shift and go to state 73 ]
  ! *               [ shift and go to state 74 ]
  ! /               [ shift and go to state 75 ]
  ! EQ              [ shift and go to state 67 ]
  ! GE              [ shift and go to state 68 ]
  ! >               [ shift and go to state 69 ]
  ! <               [ shift and go to state 70 ]
  ! LE              [ shift and go to state 71 ]


state 109

    (52) test -> ( test ) .

    }               reduce using rule 52 (test -> ( test ) .)
    AND             reduce using rule 52 (test -> ( test ) .)
    OR              reduce using rule 52 (test -> ( test ) .)
    ?               reduce using rule 52 (test -> ( test ) .)
    EQ              reduce using rule 52 (test -> ( test ) .)
    GE              reduce using rule 52 (test -> ( test ) .)
    >               reduce using rule 52 (test -> ( test ) .)
    <               reduce using rule 52 (test -> ( test ) .)
    LE              reduce using rule 52 (test -> ( test ) .)
    +               reduce using rule 52 (test -> ( test ) .)
    -               reduce using rule 52 (test -> ( test ) .)
    *               reduce using rule 52 (test -> ( test ) .)
    /               reduce using rule 52 (test -> ( test ) .)
    )               reduce using rule 52 (test -> ( test ) .)
    ,               reduce using rule 52 (test -> ( test ) .)
    ]               reduce using rule 52 (test -> ( test ) .)
    :               reduce using rule 52 (test -> ( test ) .)
    ;               reduce using rule 52 (test -> ( test ) .)


state 110

    (43) expr -> ( expr ) .

    EQ              reduce using rule 43 (expr -> ( expr ) .)
    GE              reduce using rule 43 (expr -> ( expr ) .)
    >               reduce using rule 43 (expr -> ( expr ) .)
    <               reduce using rule 43 (expr -> ( expr ) .)
    LE              reduce using rule 43 (expr -> ( expr ) .)
    +               reduce using rule 43 (expr -> ( expr ) .)
    -               reduce using rule 43 (expr -> ( expr ) .)
    *               reduce using rule 43 (expr -> ( expr ) .)
    /               reduce using rule 43 (expr -> ( expr ) .)
    )               reduce using rule 43 (expr -> ( expr ) .)
    AND             reduce using rule 43 (expr -> ( expr ) .)
    OR              reduce using rule 43 (expr -> ( expr ) .)
    ?               reduce using rule 43 (expr -> ( expr ) .)
    }               reduce using rule 43 (expr -> ( expr ) .)
    ,               reduce using rule 43 (expr -> ( expr ) .)
    ]               reduce using rule 43 (expr -> ( expr ) .)
    :               reduce using rule 43 (expr -> ( expr ) .)
    ;               reduce using rule 43 (expr -> ( expr ) .)


state 111

    (43) expr -> ( expr . )
    (35) expr -> expr . + expr
    (36) expr -> expr . - expr
    (37) expr -> expr . * expr
    (38) expr -> expr . / expr
    (47) test -> expr . EQ expr
    (48) test -> expr . GE expr
    (49) test -> expr . > expr
    (50) test -> expr . < expr
    (51) test -> expr . LE expr

    )               shift and go to state 110
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    EQ              shift and go to state 67
    GE              shift and go to state 68
    >               shift and go to state 69
    <               shift and go to state 70
    LE              shift and go to state 71


state 112

    (52) test -> ( test . )
    (33) expr -> test .
    (34) expr -> test . ? expr : expr
    (53) test -> test . AND test
    (55) test -> test . OR test

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 109
    +               reduce using rule 33 (expr -> test .)
    -               reduce using rule 33 (expr -> test .)
    *               reduce using rule 33 (expr -> test .)
    /               reduce using rule 33 (expr -> test .)
    EQ              reduce using rule 33 (expr -> test .)
    GE              reduce using rule 33 (expr -> test .)
    >               reduce using rule 33 (expr -> test .)
    <               reduce using rule 33 (expr -> test .)
    LE              reduce using rule 33 (expr -> test .)
    ?               shift and go to state 66
    AND             shift and go to state 64
    OR              shift and go to state 65

  ! )               [ reduce using rule 33 (expr -> test .) ]


state 113

    (41) list -> [ expr_list ] .

    EQ              reduce using rule 41 (list -> [ expr_list ] .)
    GE              reduce using rule 41 (list -> [ expr_list ] .)
    >               reduce using rule 41 (list -> [ expr_list ] .)
    <               reduce using rule 41 (list -> [ expr_list ] .)
    LE              reduce using rule 41 (list -> [ expr_list ] .)
    +               reduce using rule 41 (list -> [ expr_list ] .)
    -               reduce using rule 41 (list -> [ expr_list ] .)
    *               reduce using rule 41 (list -> [ expr_list ] .)
    /               reduce using rule 41 (list -> [ expr_list ] .)
    )               reduce using rule 41 (list -> [ expr_list ] .)
    AND             reduce using rule 41 (list -> [ expr_list ] .)
    OR              reduce using rule 41 (list -> [ expr_list ] .)
    ?               reduce using rule 41 (list -> [ expr_list ] .)
    }               reduce using rule 41 (list -> [ expr_list ] .)
    ,               reduce using rule 41 (list -> [ expr_list ] .)
    ]               reduce using rule 41 (list -> [ expr_list ] .)
    :               reduce using rule 41 (list -> [ expr_list ] .)
    ;               reduce using rule 41 (list -> [ expr_list ] .)


state 114

    (56) expr_list -> expr , . expr_list
    (56) expr_list -> . expr , expr_list
    (57) expr_list -> . expr
    (33) expr -> . test
    (34) expr -> . test ? expr : expr
    (35) expr -> . expr + expr
    (36) expr -> . expr - expr
    (37) expr -> . expr * expr
    (38) expr -> . expr / expr
    (39) expr -> . - expr
    (40) expr -> . list
    (42) expr -> . map
    (43) expr -> . ( expr )
    (44) expr -> . value
    (45) expr -> . NAME
    (46) expr -> . ID
    (47) test -> . expr EQ expr
    (48) test -> . expr GE expr
    (49) test -> . expr > expr
    (50) test -> . expr < expr
    (51) test -> . expr LE expr
    (52) test -> . ( test )
    (53) test -> . test AND test
    (54) test -> . ! test
    (55) test -> . test OR test
    (41) list -> . [ expr_list ]
    (58) map -> . { mappings }
    (62) value -> . FLOAT
    (63) value -> . INT
    (64) value -> . STRING
    (65) value -> . TRUE
    (66) value -> . FALSE

    -               shift and go to state 37
    (               shift and go to state 81
    NAME            shift and go to state 41
    ID              shift and go to state 42
    !               shift and go to state 36
    [               shift and go to state 43
    {               shift and go to state 23
    FLOAT           shift and go to state 44
    INT             shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    expr                           shift and go to state 83
    expr_list                      shift and go to state 123
    test                           shift and go to state 80
    list                           shift and go to state 38
    map                            shift and go to state 39
    value                          shift and go to state 40

state 115

    (26) statements -> statement ; statements .

    }               reduce using rule 26 (statements -> statement ; statements .)


state 116

    (28) statement -> var = expr .
    (35) expr -> expr . + expr
    (36) expr -> expr . - expr
    (37) expr -> expr . * expr
    (38) expr -> expr . / expr
    (47) test -> expr . EQ expr
    (48) test -> expr . GE expr
    (49) test -> expr . > expr
    (50) test -> expr . < expr
    (51) test -> expr . LE expr

    ;               reduce using rule 28 (statement -> var = expr .)
    }               reduce using rule 28 (statement -> var = expr .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    EQ              shift and go to state 67
    GE              shift and go to state 68
    >               shift and go to state 69
    <               shift and go to state 70
    LE              shift and go to state 71


state 117

    (29) statement -> var PE expr .
    (35) expr -> expr . + expr
    (36) expr -> expr . - expr
    (37) expr -> expr . * expr
    (38) expr -> expr . / expr
    (47) test -> expr . EQ expr
    (48) test -> expr . GE expr
    (49) test -> expr . > expr
    (50) test -> expr . < expr
    (51) test -> expr . LE expr

    ;               reduce using rule 29 (statement -> var PE expr .)
    }               reduce using rule 29 (statement -> var PE expr .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    EQ              shift and go to state 67
    GE              shift and go to state 68
    >               shift and go to state 69
    <               shift and go to state 70
    LE              shift and go to state 71


state 118

    (30) statement -> var ME expr .
    (35) expr -> expr . + expr
    (36) expr -> expr . - expr
    (37) expr -> expr . * expr
    (38) expr -> expr . / expr
    (47) test -> expr . EQ expr
    (48) test -> expr . GE expr
    (49) test -> expr . > expr
    (50) test -> expr . < expr
    (51) test -> expr . LE expr

    ;               reduce using rule 30 (statement -> var ME expr .)
    }               reduce using rule 30 (statement -> var ME expr .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    EQ              shift and go to state 67
    GE              shift and go to state 68
    >               shift and go to state 69
    <               shift and go to state 70
    LE              shift and go to state 71


state 119

    (31) statement -> var TE expr .
    (35) expr -> expr . + expr
    (36) expr -> expr . - expr
    (37) expr -> expr . * expr
    (38) expr -> expr . / expr
    (47) test -> expr . EQ expr
    (48) test -> expr . GE expr
    (49) test -> expr . > expr
    (50) test -> expr . < expr
    (51) test -> expr . LE expr

    ;               reduce using rule 31 (statement -> var TE expr .)
    }               reduce using rule 31 (statement -> var TE expr .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    EQ              shift and go to state 67
    GE              shift and go to state 68
    >               shift and go to state 69
    <               shift and go to state 70
    LE              shift and go to state 71


state 120

    (32) statement -> var DE expr .
    (35) expr -> expr . + expr
    (36) expr -> expr . - expr
    (37) expr -> expr . * expr
    (38) expr -> expr . / expr
    (47) test -> expr . EQ expr
    (48) test -> expr . GE expr
    (49) test -> expr . > expr
    (50) test -> expr . < expr
    (51) test -> expr . LE expr

    ;               reduce using rule 32 (statement -> var DE expr .)
    }               reduce using rule 32 (statement -> var DE expr .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    EQ              shift and go to state 67
    GE              shift and go to state 68
    >               shift and go to state 69
    <               shift and go to state 70
    LE              shift and go to state 71


state 121

    (59) mappings -> NAME : expr . , mappings
    (60) mappings -> NAME : expr .
    (35) expr -> expr . + expr
    (36) expr -> expr . - expr
    (37) expr -> expr . * expr
    (38) expr -> expr . / expr
    (47) test -> expr . EQ expr
    (48) test -> expr . GE expr
    (49) test -> expr . > expr
    (50) test -> expr . < expr
    (51) test -> expr . LE expr

    ,               shift and go to state 124
    }               reduce using rule 60 (mappings -> NAME : expr .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    EQ              shift and go to state 67
    GE              shift and go to state 68
    >               shift and go to state 69
    <               shift and go to state 70
    LE              shift and go to state 71


state 122

    (34) expr -> test ? expr : . expr
    (33) expr -> . test
    (34) expr -> . test ? expr : expr
    (35) expr -> . expr + expr
    (36) expr -> . expr - expr
    (37) expr -> . expr * expr
    (38) expr -> . expr / expr
    (39) expr -> . - expr
    (40) expr -> . list
    (42) expr -> . map
    (43) expr -> . ( expr )
    (44) expr -> . value
    (45) expr -> . NAME
    (46) expr -> . ID
    (47) test -> . expr EQ expr
    (48) test -> . expr GE expr
    (49) test -> . expr > expr
    (50) test -> . expr < expr
    (51) test -> . expr LE expr
    (52) test -> . ( test )
    (53) test -> . test AND test
    (54) test -> . ! test
    (55) test -> . test OR test
    (41) list -> . [ expr_list ]
    (58) map -> . { mappings }
    (62) value -> . FLOAT
    (63) value -> . INT
    (64) value -> . STRING
    (65) value -> . TRUE
    (66) value -> . FALSE

    -               shift and go to state 37
    (               shift and go to state 81
    NAME            shift and go to state 41
    ID              shift and go to state 42
    !               shift and go to state 36
    [               shift and go to state 43
    {               shift and go to state 23
    FLOAT           shift and go to state 44
    INT             shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    test                           shift and go to state 80
    expr                           shift and go to state 125
    list                           shift and go to state 38
    map                            shift and go to state 39
    value                          shift and go to state 40

state 123

    (56) expr_list -> expr , expr_list .

    ]               reduce using rule 56 (expr_list -> expr , expr_list .)


state 124

    (59) mappings -> NAME : expr , . mappings
    (59) mappings -> . NAME : expr , mappings
    (60) mappings -> . NAME : expr

    NAME            shift and go to state 59

    mappings                       shift and go to state 126

state 125

    (34) expr -> test ? expr : expr .
    (35) expr -> expr . + expr
    (36) expr -> expr . - expr
    (37) expr -> expr . * expr
    (38) expr -> expr . / expr
    (47) test -> expr . EQ expr
    (48) test -> expr . GE expr
    (49) test -> expr . > expr
    (50) test -> expr . < expr
    (51) test -> expr . LE expr

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LE resolved as shift
    )               reduce using rule 34 (expr -> test ? expr : expr .)
    AND             reduce using rule 34 (expr -> test ? expr : expr .)
    OR              reduce using rule 34 (expr -> test ? expr : expr .)
    ?               reduce using rule 34 (expr -> test ? expr : expr .)
    }               reduce using rule 34 (expr -> test ? expr : expr .)
    ,               reduce using rule 34 (expr -> test ? expr : expr .)
    ]               reduce using rule 34 (expr -> test ? expr : expr .)
    :               reduce using rule 34 (expr -> test ? expr : expr .)
    ;               reduce using rule 34 (expr -> test ? expr : expr .)
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    EQ              shift and go to state 67
    GE              shift and go to state 68
    >               shift and go to state 69
    <               shift and go to state 70
    LE              shift and go to state 71

  ! EQ              [ reduce using rule 34 (expr -> test ? expr : expr .) ]
  ! GE              [ reduce using rule 34 (expr -> test ? expr : expr .) ]
  ! >               [ reduce using rule 34 (expr -> test ? expr : expr .) ]
  ! <               [ reduce using rule 34 (expr -> test ? expr : expr .) ]
  ! LE              [ reduce using rule 34 (expr -> test ? expr : expr .) ]
  ! +               [ reduce using rule 34 (expr -> test ? expr : expr .) ]
  ! -               [ reduce using rule 34 (expr -> test ? expr : expr .) ]
  ! *               [ reduce using rule 34 (expr -> test ? expr : expr .) ]
  ! /               [ reduce using rule 34 (expr -> test ? expr : expr .) ]


state 126

    (59) mappings -> NAME : expr , mappings .

    }               reduce using rule 59 (mappings -> NAME : expr , mappings .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for { in state 14 resolved as shift
WARNING: shift/reduce conflict for ) in state 76 resolved as shift
WARNING: shift/reduce conflict for AND in state 78 resolved as shift
WARNING: shift/reduce conflict for OR in state 78 resolved as shift
WARNING: shift/reduce conflict for ? in state 78 resolved as shift
WARNING: shift/reduce conflict for ? in state 80 resolved as shift
WARNING: shift/reduce conflict for AND in state 80 resolved as shift
WARNING: shift/reduce conflict for OR in state 80 resolved as shift
WARNING: shift/reduce conflict for ) in state 112 resolved as shift
WARNING: shift/reduce conflict for + in state 125 resolved as shift
WARNING: shift/reduce conflict for - in state 125 resolved as shift
WARNING: shift/reduce conflict for * in state 125 resolved as shift
WARNING: shift/reduce conflict for / in state 125 resolved as shift
WARNING: shift/reduce conflict for EQ in state 125 resolved as shift
WARNING: shift/reduce conflict for GE in state 125 resolved as shift
WARNING: shift/reduce conflict for > in state 125 resolved as shift
WARNING: shift/reduce conflict for < in state 125 resolved as shift
WARNING: shift/reduce conflict for LE in state 125 resolved as shift
WARNING: reduce/reduce conflict in state 78 resolved using rule (expr -> test)
WARNING: rejected rule (test -> ! test) in state 78
WARNING: reduce/reduce conflict in state 97 resolved using rule (expr -> test)
WARNING: rejected rule (test -> test AND test) in state 97
WARNING: reduce/reduce conflict in state 98 resolved using rule (expr -> test)
WARNING: rejected rule (test -> test OR test) in state 98
