// Code generated by goyacc -o src/mc/route/parser.go -p RouteParser -v src/mc/route/parser.output src/mc/route/parser.go.y. DO NOT EDIT.

//line src/mc/route/parser.go.y:3
package route

import __yyfmt__ "fmt"

//line src/mc/route/parser.go.y:3
import (
	"errors"
	"fmt"
	value "mc/value"
	"strconv"
	"strings"
)

type Token struct {
	token    int
	literal  string
	position Position
}

//line src/mc/route/parser.go.y:17
type RouteParserSymType struct {
	yys        int
	token      Token
	routes     []*Route
	transforms *Route
	transform  *Transform
	expression *Expression
	statement  *Statement
	writeable  *WriteableValue
	script     []*Statement
	node       string
}

const IDENT = 57346
const VAR = 57347
const DEL = 57348
const NUMBER = 57349
const STRING = 57350
const THIS = 57351
const TRUE = 57352
const FALSE = 57353
const AND = 57354
const OR = 57355
const EQ = 57356
const NE = 57357
const LE = 57358
const GE = 57359
const PE = 57360
const ME = 57361
const TE = 57362
const DE = 57363
const RE = 57364
const AE = 57365
const OE = 57366
const XE = 57367
const SUB = 57368
const EXP = 57369
const UNARY = 57370

var RouteParserToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"VAR",
	"DEL",
	"NUMBER",
	"STRING",
	"THIS",
	"TRUE",
	"FALSE",
	"AND",
	"OR",
	"EQ",
	"NE",
	"LE",
	"GE",
	"PE",
	"ME",
	"TE",
	"DE",
	"RE",
	"AE",
	"OE",
	"XE",
	"SUB",
	"EXP",
	"'?'",
	"'%'",
	"'='",
	"'{'",
	"'}'",
	"'['",
	"']'",
	"'<'",
	"'>'",
	"':'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'&'",
	"'|'",
	"'^'",
	"'!'",
	"'~'",
	"UNARY",
	"'.'",
	"';'",
	"'('",
	"')'",
	"','",
}
var RouteParserStatenames = [...]string{}

const RouteParserEofCode = 1
const RouteParserErrCode = 2
const RouteParserInitialStackSize = 16

//line src/mc/route/parser.go.y:560

func Parse(exp string, gp string) ([]*Route, error) {
	l := new(RouteLexer)
	lexerErrors := make([]string, 0)
	l.lexerErrors = &lexerErrors
	l.s = new(RouteScanner)
	l.s.Init(exp)
	//l.Init(strings.NewReader(exp))
	RouteParserParse(l)
	if len(lexerErrors) > 0 {
		return nil, errors.New(strings.Join(lexerErrors, "\n"))
	}
	for _, rt := range l.result {
		rt.Group = gp
	}
	return l.result, nil
}

//line yacctab:1
var RouteParserExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const RouteParserPrivate = 57344

const RouteParserLast = 870

var RouteParserAct = [...]int{

	84, 54, 83, 46, 76, 77, 72, 73, 75, 74,
	157, 96, 97, 98, 99, 100, 93, 94, 95, 63,
	33, 71, 85, 92, 150, 81, 101, 79, 78, 81,
	64, 65, 66, 67, 68, 69, 70, 149, 61, 82,
	80, 102, 86, 87, 80, 88, 89, 7, 107, 6,
	5, 91, 17, 15, 132, 56, 24, 105, 56, 108,
	153, 151, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 131, 130, 109, 63, 106, 55, 90, 134, 59,
	81, 21, 26, 138, 139, 140, 141, 142, 143, 144,
	145, 146, 147, 57, 63, 80, 71, 53, 152, 45,
	81, 76, 77, 72, 73, 75, 74, 66, 67, 25,
	31, 32, 56, 58, 4, 80, 63, 62, 71, 148,
	129, 104, 81, 103, 79, 78, 156, 64, 65, 66,
	67, 68, 69, 70, 4, 61, 2, 80, 12, 13,
	14, 168, 10, 16, 23, 169, 76, 77, 72, 73,
	75, 74, 20, 47, 28, 43, 48, 18, 11, 1,
	170, 63, 62, 71, 0, 9, 0, 81, 0, 79,
	78, 22, 64, 65, 66, 67, 68, 69, 70, 19,
	61, 0, 80, 30, 0, 0, 133, 76, 77, 72,
	73, 75, 74, 51, 49, 50, 0, 0, 52, 0,
	0, 0, 63, 62, 71, 0, 3, 0, 81, 0,
	79, 78, 8, 64, 65, 66, 67, 68, 69, 70,
	0, 61, 27, 80, 29, 0, 136, 76, 77, 72,
	73, 75, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 63, 62, 71, 0, 0, 0, 81, 0,
	79, 78, 0, 64, 65, 66, 67, 68, 69, 70,
	0, 61, 0, 80, 166, 76, 77, 72, 73, 75,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	63, 62, 71, 0, 0, 0, 81, 0, 79, 78,
	0, 64, 65, 66, 67, 68, 69, 70, 0, 61,
	0, 80, 165, 76, 77, 72, 73, 75, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 63, 62,
	71, 0, 0, 0, 81, 0, 79, 78, 0, 64,
	65, 66, 67, 68, 69, 70, 0, 61, 0, 80,
	164, 76, 77, 72, 73, 75, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 63, 62, 71, 0,
	0, 0, 81, 0, 79, 78, 0, 64, 65, 66,
	67, 68, 69, 70, 0, 61, 0, 80, 163, 76,
	77, 72, 73, 75, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 63, 62, 71, 0, 0, 0,
	81, 0, 79, 78, 0, 64, 65, 66, 67, 68,
	69, 70, 0, 61, 0, 80, 162, 76, 77, 72,
	73, 75, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 63, 62, 71, 0, 0, 0, 81, 0,
	79, 78, 0, 64, 65, 66, 67, 68, 69, 70,
	0, 61, 0, 80, 161, 76, 77, 72, 73, 75,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	63, 62, 71, 0, 0, 0, 81, 0, 79, 78,
	0, 64, 65, 66, 67, 68, 69, 70, 0, 61,
	0, 80, 160, 76, 77, 72, 73, 75, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 63, 62,
	71, 0, 0, 0, 81, 0, 79, 78, 0, 64,
	65, 66, 67, 68, 69, 70, 0, 61, 0, 80,
	159, 76, 77, 72, 73, 75, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 63, 62, 71, 0,
	0, 0, 81, 0, 79, 78, 0, 64, 65, 66,
	67, 68, 69, 70, 0, 61, 0, 80, 158, 76,
	77, 72, 73, 75, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 63, 62, 71, 0, 0, 0,
	81, 167, 79, 78, 0, 64, 65, 66, 67, 68,
	69, 70, 0, 61, 0, 80, 76, 77, 72, 73,
	75, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 63, 62, 71, 0, 0, 0, 81, 155, 79,
	78, 0, 64, 65, 66, 67, 68, 69, 70, 0,
	61, 0, 80, 76, 77, 72, 73, 75, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 63, 62,
	71, 0, 0, 0, 81, 0, 79, 78, 154, 64,
	65, 66, 67, 68, 69, 70, 0, 61, 0, 80,
	76, 77, 72, 73, 75, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 63, 62, 71, 0, 0,
	137, 81, 0, 79, 78, 0, 64, 65, 66, 67,
	68, 69, 70, 0, 61, 0, 80, 76, 77, 72,
	73, 75, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 63, 62, 71, 0, 0, 60, 81, 0,
	79, 78, 0, 64, 65, 66, 67, 68, 69, 70,
	0, 61, 0, 80, 72, 73, 75, 74, 39, 0,
	0, 34, 40, 0, 35, 36, 0, 63, 0, 71,
	0, 0, 0, 81, 0, 79, 78, 0, 64, 65,
	66, 67, 68, 69, 70, 37, 61, 38, 80, 0,
	0, 39, 0, 41, 34, 40, 0, 35, 36, 44,
	63, 0, 71, 0, 42, 135, 81, 0, 0, 0,
	0, 64, 65, 66, 67, 68, 69, 70, 37, 61,
	38, 80, 63, 0, 71, 0, 41, 0, 81, 0,
	0, 0, 44, 64, 65, 66, 67, 42, 63, 0,
	71, 61, 0, 80, 81, 0, 0, 0, 0, 64,
	65, 66, 67, 0, 0, 0, 0, 0, 0, 80,
}
var RouteParserPact = [...]int{

	140, -1000, -1000, 14, 6, 120, 17, 149, 14, -1000,
	-1000, 16, 158, 150, 88, 140, -1000, 120, 91, 797,
	78, -1000, 199, 76, -1000, 54, 72, -1000, -1000, 14,
	-1000, 150, 88, 715, -1000, -1000, -1000, 118, 797, -28,
	-1000, 797, 797, -1000, 797, 797, 55, 199, -7, 129,
	127, -1000, -1000, 199, 53, -1000, 11, 51, -1000, -1000,
	-1000, 797, 797, 797, 797, 797, 797, 797, 797, 797,
	797, 797, 797, 797, 797, 797, 797, 797, 797, 797,
	126, 797, 49, 20, 144, 764, -4, 185, -4, 678,
	-1000, -1000, 797, 797, 797, 797, 797, 797, 797, 797,
	797, 797, 125, -12, -25, 29, -1000, 797, 28, -1000,
	821, 641, -4, 77, 77, 57, 57, 805, 805, 805,
	57, 783, 783, 783, 783, 750, 750, 783, 783, -1000,
	604, -1000, -1000, 797, -41, -1000, -1000, -1000, 529, 491,
	453, 415, 377, 339, 301, 263, 225, 567, -1000, -1000,
	-1000, -1000, 99, -1000, 797, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 118, -8,
	-1000,
}
var RouteParserPgo = [...]int{

	0, 169, 146, 216, 175, 168, 167, 91, 56, 3,
	166, 165, 163, 0, 1, 2,
}
var RouteParserR1 = [...]int{

	0, 1, 2, 2, 2, 2, 3, 3, 4, 4,
	4, 5, 5, 5, 5, 5, 6, 6, 6, 8,
	8, 8, 8, 8, 7, 7, 9, 9, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	14, 14, 15, 15, 11, 11, 11, 10, 10, 10,
	10,
}
var RouteParserR2 = [...]int{

	0, 1, 3, 4, 3, 3, 1, 3, 3, 3,
	3, 2, 2, 2, 4, 4, 3, 4, 1, 3,
	4, 2, 3, 1, 3, 4, 1, 2, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 3, 3, 1,
	1, 1, 3, 3, 4, 3, 1, 3, 5, 2,
	3, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 3, 3,
	3, 5, 1, 3, 3, 4, 1, 1, 1, 4,
	3,
}
var RouteParserChk = [...]int{

	-1000, -1, -2, -3, 4, 36, 35, 41, -3, -4,
	-2, -5, 28, 29, 30, 36, 4, 36, -6, 31,
	4, -7, 31, 4, -8, 31, 4, -3, -2, -3,
	-4, 29, 30, -13, 7, 10, 11, 31, 33, 4,
	8, 39, 50, -11, 45, 31, -9, -12, -10, 5,
	6, 4, 9, 31, -14, 32, 4, 31, -7, -8,
	32, 46, 28, 27, 38, 39, 40, 41, 42, 43,
	44, 29, 14, 15, 17, 16, 12, 13, 36, 35,
	48, 33, -14, -15, -13, 50, -13, -13, -13, -13,
	32, -9, 30, 23, 24, 25, 18, 19, 20, 21,
	22, 33, 48, 4, 4, -9, 32, 37, -14, 32,
	-13, -13, -13, -13, -13, -13, -13, -13, -13, -13,
	-13, -13, -13, -13, -13, -13, -13, -13, -13, 4,
	-13, 32, 34, 52, -15, 51, 51, 32, -13, -13,
	-13, -13, -13, -13, -13, -13, -13, -13, 4, 49,
	49, 32, -13, 32, 37, 34, -15, 51, 49, 49,
	49, 49, 49, 49, 49, 49, 49, 34, 52, -13,
	-14,
}
var RouteParserDef = [...]int{

	0, -2, 1, 0, 6, 0, 0, 0, 2, 4,
	5, 0, 0, 0, 0, 0, 7, 0, 11, 0,
	18, 12, 0, 0, 13, 0, 23, 3, 8, 9,
	10, 0, 0, 0, 39, 40, 41, 0, 0, 76,
	46, 0, 0, 51, 0, 0, 0, 26, 0, 0,
	0, 77, 78, 0, 0, 21, 0, 0, 14, 15,
	16, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 49, 0, 67, 0,
	24, 27, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 19, 0, 0, 22,
	47, 0, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 68, 69, 74,
	0, 42, 43, 0, 0, 45, 50, 17, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 80, 37,
	38, 25, 70, 20, 0, 75, 73, 44, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 79, 0, 48,
	71,
}
var RouteParserTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 45, 3, 3, 3, 29, 42, 3,
	50, 51, 40, 38, 52, 39, 48, 41, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 37, 49,
	35, 30, 36, 28, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 33, 3, 34, 44, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 31, 43, 32, 46,
}
var RouteParserTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 47,
}
var RouteParserTok3 = [...]int{
	0,
}

var RouteParserErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	RouteParserDebug        = 0
	RouteParserErrorVerbose = false
)

type RouteParserLexer interface {
	Lex(lval *RouteParserSymType) int
	Error(s string)
}

type RouteParserParser interface {
	Parse(RouteParserLexer) int
	Lookahead() int
}

type RouteParserParserImpl struct {
	lval  RouteParserSymType
	stack [RouteParserInitialStackSize]RouteParserSymType
	char  int
}

func (p *RouteParserParserImpl) Lookahead() int {
	return p.char
}

func RouteParserNewParser() RouteParserParser {
	return &RouteParserParserImpl{}
}

const RouteParserFlag = -1000

func RouteParserTokname(c int) string {
	if c >= 1 && c-1 < len(RouteParserToknames) {
		if RouteParserToknames[c-1] != "" {
			return RouteParserToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RouteParserStatname(s int) string {
	if s >= 0 && s < len(RouteParserStatenames) {
		if RouteParserStatenames[s] != "" {
			return RouteParserStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func RouteParserErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !RouteParserErrorVerbose {
		return "syntax error"
	}

	for _, e := range RouteParserErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + RouteParserTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := RouteParserPact[state]
	for tok := TOKSTART; tok-1 < len(RouteParserToknames); tok++ {
		if n := base + tok; n >= 0 && n < RouteParserLast && RouteParserChk[RouteParserAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if RouteParserDef[state] == -2 {
		i := 0
		for RouteParserExca[i] != -1 || RouteParserExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; RouteParserExca[i] >= 0; i += 2 {
			tok := RouteParserExca[i]
			if tok < TOKSTART || RouteParserExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if RouteParserExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += RouteParserTokname(tok)
	}
	return res
}

func RouteParserlex1(lex RouteParserLexer, lval *RouteParserSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = RouteParserTok1[0]
		goto out
	}
	if char < len(RouteParserTok1) {
		token = RouteParserTok1[char]
		goto out
	}
	if char >= RouteParserPrivate {
		if char < RouteParserPrivate+len(RouteParserTok2) {
			token = RouteParserTok2[char-RouteParserPrivate]
			goto out
		}
	}
	for i := 0; i < len(RouteParserTok3); i += 2 {
		token = RouteParserTok3[i+0]
		if token == char {
			token = RouteParserTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = RouteParserTok2[1] /* unknown char */
	}
	if RouteParserDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RouteParserTokname(token), uint(char))
	}
	return char, token
}

func RouteParserParse(RouteParserlex RouteParserLexer) int {
	return RouteParserNewParser().Parse(RouteParserlex)
}

func (RouteParserrcvr *RouteParserParserImpl) Parse(RouteParserlex RouteParserLexer) int {
	var RouteParsern int
	var RouteParserVAL RouteParserSymType
	var RouteParserDollar []RouteParserSymType
	_ = RouteParserDollar // silence set and not used
	RouteParserS := RouteParserrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	RouteParserstate := 0
	RouteParserrcvr.char = -1
	RouteParsertoken := -1 // RouteParserrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		RouteParserstate = -1
		RouteParserrcvr.char = -1
		RouteParsertoken = -1
	}()
	RouteParserp := -1
	goto RouteParserstack

ret0:
	return 0

ret1:
	return 1

RouteParserstack:
	/* put a state and value onto the stack */
	if RouteParserDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RouteParserTokname(RouteParsertoken), RouteParserStatname(RouteParserstate))
	}

	RouteParserp++
	if RouteParserp >= len(RouteParserS) {
		nyys := make([]RouteParserSymType, len(RouteParserS)*2)
		copy(nyys, RouteParserS)
		RouteParserS = nyys
	}
	RouteParserS[RouteParserp] = RouteParserVAL
	RouteParserS[RouteParserp].yys = RouteParserstate

RouteParsernewstate:
	RouteParsern = RouteParserPact[RouteParserstate]
	if RouteParsern <= RouteParserFlag {
		goto RouteParserdefault /* simple state */
	}
	if RouteParserrcvr.char < 0 {
		RouteParserrcvr.char, RouteParsertoken = RouteParserlex1(RouteParserlex, &RouteParserrcvr.lval)
	}
	RouteParsern += RouteParsertoken
	if RouteParsern < 0 || RouteParsern >= RouteParserLast {
		goto RouteParserdefault
	}
	RouteParsern = RouteParserAct[RouteParsern]
	if RouteParserChk[RouteParsern] == RouteParsertoken { /* valid shift */
		RouteParserrcvr.char = -1
		RouteParsertoken = -1
		RouteParserVAL = RouteParserrcvr.lval
		RouteParserstate = RouteParsern
		if Errflag > 0 {
			Errflag--
		}
		goto RouteParserstack
	}

RouteParserdefault:
	/* default state action */
	RouteParsern = RouteParserDef[RouteParserstate]
	if RouteParsern == -2 {
		if RouteParserrcvr.char < 0 {
			RouteParserrcvr.char, RouteParsertoken = RouteParserlex1(RouteParserlex, &RouteParserrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RouteParserExca[xi+0] == -1 && RouteParserExca[xi+1] == RouteParserstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			RouteParsern = RouteParserExca[xi+0]
			if RouteParsern < 0 || RouteParsern == RouteParsertoken {
				break
			}
		}
		RouteParsern = RouteParserExca[xi+1]
		if RouteParsern < 0 {
			goto ret0
		}
	}
	if RouteParsern == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			RouteParserlex.Error(RouteParserErrorMessage(RouteParserstate, RouteParsertoken))
			Nerrs++
			if RouteParserDebug >= 1 {
				__yyfmt__.Printf("%s", RouteParserStatname(RouteParserstate))
				__yyfmt__.Printf(" saw %s\n", RouteParserTokname(RouteParsertoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for RouteParserp >= 0 {
				RouteParsern = RouteParserPact[RouteParserS[RouteParserp].yys] + RouteParserErrCode
				if RouteParsern >= 0 && RouteParsern < RouteParserLast {
					RouteParserstate = RouteParserAct[RouteParsern] /* simulate a shift of "error" */
					if RouteParserChk[RouteParserstate] == RouteParserErrCode {
						goto RouteParserstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RouteParserDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RouteParserS[RouteParserp].yys)
				}
				RouteParserp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RouteParserDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RouteParserTokname(RouteParsertoken))
			}
			if RouteParsertoken == RouteParserEofCode {
				goto ret1
			}
			RouteParserrcvr.char = -1
			RouteParsertoken = -1
			goto RouteParsernewstate /* try again in the same state */
		}
	}

	/* reduction by production RouteParsern */
	if RouteParserDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", RouteParsern, RouteParserStatname(RouteParserstate))
	}

	RouteParsernt := RouteParsern
	RouteParserpt := RouteParserp
	_ = RouteParserpt // guard against "declared and not used"

	RouteParserp -= RouteParserR2[RouteParsern]
	// RouteParserp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if RouteParserp+1 >= len(RouteParserS) {
		nyys := make([]RouteParserSymType, len(RouteParserS)*2)
		copy(nyys, RouteParserS)
		RouteParserS = nyys
	}
	RouteParserVAL = RouteParserS[RouteParserp+1]

	/* consult goto table to find next state */
	RouteParsern = RouteParserR1[RouteParsern]
	RouteParserg := RouteParserPgo[RouteParsern]
	RouteParserj := RouteParserg + RouteParserS[RouteParserp].yys + 1

	if RouteParserj >= RouteParserLast {
		RouteParserstate = RouteParserAct[RouteParserg]
	} else {
		RouteParserstate = RouteParserAct[RouteParserj]
		if RouteParserChk[RouteParserstate] != -RouteParsern {
			RouteParserstate = RouteParserAct[RouteParserg]
		}
	}
	// dummy call; replaced with literal code
	switch RouteParsernt {

	case 1:
		RouteParserDollar = RouteParserS[RouteParserpt-1 : RouteParserpt+1]
//line src/mc/route/parser.go.y:59
		{
			RouteParserVAL.routes = nil
			if l, ok := RouteParserlex.(*RouteLexer); ok {
				l.result = RouteParserDollar[1].routes
			}
		}
	case 2:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:67
		{
			// fmt.Println("C")
			RouteParserVAL.routes = []*Route{&Route{Source: RouteParserDollar[1].node, Dest: RouteParserDollar[3].node}}
		}
	case 3:
		RouteParserDollar = RouteParserS[RouteParserpt-4 : RouteParserpt+1]
//line src/mc/route/parser.go.y:72
		{
			RouteParserVAL.routes = []*Route{
				&Route{Source: RouteParserDollar[1].node, Dest: RouteParserDollar[4].node},
				&Route{Source: RouteParserDollar[4].node, Dest: RouteParserDollar[1].node}}
		}
	case 4:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:78
		{
			RouteParserVAL.routes = []*Route{
				&Route{
					Source:     RouteParserDollar[1].node,
					Dest:       RouteParserDollar[3].transforms.Dest,
					Transforms: RouteParserDollar[3].transforms.Transforms}}
		}
	case 5:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:86
		{
			RouteParserVAL.routes = append([]*Route{&Route{Source: RouteParserDollar[1].node, Dest: RouteParserDollar[3].routes[0].Source}}, RouteParserDollar[3].routes...)
		}
	case 6:
		RouteParserDollar = RouteParserS[RouteParserpt-1 : RouteParserpt+1]
//line src/mc/route/parser.go.y:91
		{
			RouteParserVAL.node = RouteParserDollar[1].token.literal
		}
	case 7:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:95
		{
			RouteParserVAL.node = fmt.Sprintf("%s/%s", RouteParserDollar[1].token.literal, RouteParserDollar[3].token.literal)
		}
	case 8:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:100
		{
			RouteParserVAL.transforms = &Route{
				Dest:       RouteParserDollar[3].routes[0].Source,
				Transforms: []*Transform{RouteParserDollar[1].transform}}
		}
	case 9:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:106
		{
			RouteParserVAL.transforms = &Route{
				Dest:       RouteParserDollar[3].node,
				Transforms: []*Transform{RouteParserDollar[1].transform}}
		}
	case 10:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:112
		{
			RouteParserVAL.transforms = &Route{
				Dest:       RouteParserDollar[3].transforms.Dest,
				Transforms: append([]*Transform{RouteParserDollar[1].transform}, RouteParserDollar[3].transforms.Transforms...)}
		}
	case 11:
		RouteParserDollar = RouteParserS[RouteParserpt-2 : RouteParserpt+1]
//line src/mc/route/parser.go.y:119
		{
			RouteParserVAL.transform = &Transform{
				Type:             TR_FILTER,
				CommandCondition: RouteParserDollar[2].transform.CommandCondition,
				Condition:        RouteParserDollar[2].transform.Condition}
		}
	case 12:
		RouteParserDollar = RouteParserS[RouteParserpt-2 : RouteParserpt+1]
//line src/mc/route/parser.go.y:126
		{
			RouteParserVAL.transform = &Transform{
				Type:           TR_EDIT,
				CommandReplace: RouteParserDollar[2].transform.CommandReplace,
				Script:         RouteParserDollar[2].transform.Script}
		}
	case 13:
		RouteParserDollar = RouteParserS[RouteParserpt-2 : RouteParserpt+1]
//line src/mc/route/parser.go.y:133
		{
			RouteParserVAL.transform = &Transform{
				Type:           TR_REPLACE,
				CommandReplace: RouteParserDollar[2].transform.CommandReplace,
				Replace:        RouteParserDollar[2].transform.Replace}
		}
	case 14:
		RouteParserDollar = RouteParserS[RouteParserpt-4 : RouteParserpt+1]
//line src/mc/route/parser.go.y:140
		{
			RouteParserVAL.transform = &Transform{
				Type:             TR_COND_EDIT,
				CommandCondition: RouteParserDollar[2].transform.CommandCondition,
				CommandReplace:   RouteParserDollar[4].transform.CommandReplace,
				Condition:        RouteParserDollar[2].transform.Condition,
				Script:           RouteParserDollar[4].transform.Script}
		}
	case 15:
		RouteParserDollar = RouteParserS[RouteParserpt-4 : RouteParserpt+1]
//line src/mc/route/parser.go.y:149
		{
			RouteParserVAL.transform = &Transform{
				Type:             TR_COND_REPLACE,
				CommandCondition: RouteParserDollar[2].transform.CommandCondition,
				Condition:        RouteParserDollar[2].transform.Condition,
				CommandReplace:   RouteParserDollar[4].transform.CommandReplace,
				Replace:          RouteParserDollar[4].transform.Replace}
		}
	case 16:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:159
		{
			RouteParserVAL.transform = &Transform{
				Type:             TR_FILTER,
				CommandCondition: "",
				Condition:        RouteParserDollar[2].expression}
		}
	case 17:
		RouteParserDollar = RouteParserS[RouteParserpt-4 : RouteParserpt+1]
//line src/mc/route/parser.go.y:166
		{
			RouteParserVAL.transform = &Transform{
				Type:             TR_EDIT,
				CommandCondition: RouteParserDollar[1].token.literal,
				Condition:        RouteParserDollar[3].expression}
		}
	case 18:
		RouteParserDollar = RouteParserS[RouteParserpt-1 : RouteParserpt+1]
//line src/mc/route/parser.go.y:173
		{
			RouteParserVAL.transform = &Transform{
				Type:             TR_EDIT,
				CommandCondition: RouteParserDollar[1].token.literal,
				Condition:        nil}
		}
	case 19:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:181
		{
			RouteParserVAL.transform = &Transform{
				Type:           TR_REPLACE,
				CommandReplace: "",
				Replace:        RouteParserDollar[2].expression}
		}
	case 20:
		RouteParserDollar = RouteParserS[RouteParserpt-4 : RouteParserpt+1]
//line src/mc/route/parser.go.y:188
		{
			RouteParserVAL.transform = &Transform{
				Type:           TR_REPLACE,
				CommandReplace: RouteParserDollar[1].token.literal,
				Replace:        RouteParserDollar[3].expression}
		}
	case 21:
		RouteParserDollar = RouteParserS[RouteParserpt-2 : RouteParserpt+1]
//line src/mc/route/parser.go.y:195
		{
			RouteParserVAL.transform = &Transform{
				Type:           TR_REPLACE,
				CommandReplace: "",
				Replace:        &Expression{Operation: OP_MAP, Args: []*Expression{}}}
		}
	case 22:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:202
		{
			RouteParserVAL.transform = &Transform{
				Type:           TR_REPLACE,
				CommandReplace: RouteParserDollar[1].token.literal,
				Replace:        &Expression{Operation: OP_MAP, Args: []*Expression{}}}
		}
	case 23:
		RouteParserDollar = RouteParserS[RouteParserpt-1 : RouteParserpt+1]
//line src/mc/route/parser.go.y:209
		{
			RouteParserVAL.transform = &Transform{
				Type:           TR_REPLACE,
				CommandReplace: RouteParserDollar[1].token.literal,
				Replace:        nil}
		}
	case 24:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:217
		{
			RouteParserVAL.transform = &Transform{
				Type:           TR_EDIT,
				CommandReplace: "",
				Script:         RouteParserDollar[2].script}
		}
	case 25:
		RouteParserDollar = RouteParserS[RouteParserpt-4 : RouteParserpt+1]
//line src/mc/route/parser.go.y:224
		{
			RouteParserVAL.transform = &Transform{
				Type:           TR_EDIT,
				CommandReplace: RouteParserDollar[1].token.literal,
				Script:         RouteParserDollar[3].script}
		}
	case 26:
		RouteParserDollar = RouteParserS[RouteParserpt-1 : RouteParserpt+1]
//line src/mc/route/parser.go.y:233
		{
			RouteParserVAL.script = []*Statement{RouteParserDollar[1].statement}
		}
	case 27:
		RouteParserDollar = RouteParserS[RouteParserpt-2 : RouteParserpt+1]
//line src/mc/route/parser.go.y:237
		{
			RouteParserVAL.script = append([]*Statement{RouteParserDollar[1].statement}, RouteParserDollar[2].script...)
		}
	case 28:
		RouteParserDollar = RouteParserS[RouteParserpt-4 : RouteParserpt+1]
//line src/mc/route/parser.go.y:242
		{
			RouteParserVAL.statement = MakeAssignmentStatement(RouteParserDollar[1].writeable, RouteParserDollar[3].expression)
		}
	case 29:
		RouteParserDollar = RouteParserS[RouteParserpt-4 : RouteParserpt+1]
//line src/mc/route/parser.go.y:246
		{
			RouteParserVAL.statement = MakeAssignmentStatement(RouteParserDollar[1].writeable, &Expression{
				Operation: OP_BITWISEAND,
				Args:      []*Expression{RouteParserDollar[1].writeable.ToExpression(), RouteParserDollar[3].expression}})
		}
	case 30:
		RouteParserDollar = RouteParserS[RouteParserpt-4 : RouteParserpt+1]
//line src/mc/route/parser.go.y:252
		{
			RouteParserVAL.statement = MakeAssignmentStatement(RouteParserDollar[1].writeable, &Expression{
				Operation: OP_BITWISEOR,
				Args:      []*Expression{RouteParserDollar[1].writeable.ToExpression(), RouteParserDollar[3].expression}})
		}
	case 31:
		RouteParserDollar = RouteParserS[RouteParserpt-4 : RouteParserpt+1]
//line src/mc/route/parser.go.y:258
		{
			RouteParserVAL.statement = MakeAssignmentStatement(RouteParserDollar[1].writeable, &Expression{
				Operation: OP_BITWISEXOR,
				Args:      []*Expression{RouteParserDollar[1].writeable.ToExpression(), RouteParserDollar[3].expression}})
		}
	case 32:
		RouteParserDollar = RouteParserS[RouteParserpt-4 : RouteParserpt+1]
//line src/mc/route/parser.go.y:264
		{
			RouteParserVAL.statement = MakeAssignmentStatement(RouteParserDollar[1].writeable, &Expression{
				Operation: OP_PLUS,
				Args:      []*Expression{RouteParserDollar[1].writeable.ToExpression(), RouteParserDollar[3].expression}})
		}
	case 33:
		RouteParserDollar = RouteParserS[RouteParserpt-4 : RouteParserpt+1]
//line src/mc/route/parser.go.y:270
		{
			RouteParserVAL.statement = MakeAssignmentStatement(RouteParserDollar[1].writeable, &Expression{
				Operation: OP_MINUS,
				Args:      []*Expression{RouteParserDollar[1].writeable.ToExpression(), RouteParserDollar[3].expression}})
		}
	case 34:
		RouteParserDollar = RouteParserS[RouteParserpt-4 : RouteParserpt+1]
//line src/mc/route/parser.go.y:276
		{
			RouteParserVAL.statement = MakeAssignmentStatement(RouteParserDollar[1].writeable, &Expression{
				Operation: OP_MUL,
				Args:      []*Expression{RouteParserDollar[1].writeable.ToExpression(), RouteParserDollar[3].expression}})
		}
	case 35:
		RouteParserDollar = RouteParserS[RouteParserpt-4 : RouteParserpt+1]
//line src/mc/route/parser.go.y:282
		{
			RouteParserVAL.statement = MakeAssignmentStatement(RouteParserDollar[1].writeable, &Expression{
				Operation: OP_DIV,
				Args:      []*Expression{RouteParserDollar[1].writeable.ToExpression(), RouteParserDollar[3].expression}})
		}
	case 36:
		RouteParserDollar = RouteParserS[RouteParserpt-4 : RouteParserpt+1]
//line src/mc/route/parser.go.y:288
		{
			RouteParserVAL.statement = MakeAssignmentStatement(RouteParserDollar[1].writeable, &Expression{
				Operation: OP_MOD,
				Args:      []*Expression{RouteParserDollar[1].writeable.ToExpression(), RouteParserDollar[3].expression}})
		}
	case 37:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:294
		{
			RouteParserVAL.statement = MakeDeclarationStatement(RouteParserDollar[2].token.literal)
		}
	case 38:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:298
		{
			RouteParserVAL.statement = MakeDeletionStatement(RouteParserDollar[2].token.literal)
		}
	case 39:
		RouteParserDollar = RouteParserS[RouteParserpt-1 : RouteParserpt+1]
//line src/mc/route/parser.go.y:303
		{
			x, _ := strconv.ParseFloat(RouteParserDollar[1].token.literal, 64)
			RouteParserVAL.expression = &Expression{
				Operation: OP_NUM,
				Value:     value.MakeFloatValue(x)}
		}
	case 40:
		RouteParserDollar = RouteParserS[RouteParserpt-1 : RouteParserpt+1]
//line src/mc/route/parser.go.y:310
		{
			RouteParserVAL.expression = &Expression{
				Operation: OP_BOOL,
				Value:     value.MakeBoolValue(true)}
		}
	case 41:
		RouteParserDollar = RouteParserS[RouteParserpt-1 : RouteParserpt+1]
//line src/mc/route/parser.go.y:316
		{
			RouteParserVAL.expression = &Expression{
				Operation: OP_BOOL,
				Value:     value.MakeBoolValue(false)}
		}
	case 42:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:322
		{
			RouteParserVAL.expression = RouteParserDollar[2].expression
		}
	case 43:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:326
		{
			RouteParserVAL.expression = RouteParserDollar[2].expression
		}
	case 44:
		RouteParserDollar = RouteParserS[RouteParserpt-4 : RouteParserpt+1]
//line src/mc/route/parser.go.y:330
		{
			RouteParserVAL.expression = &Expression{
				Operation: OP_CALL,
				Args: []*Expression{
					MakeNameExpression(RouteParserDollar[1].token.literal),
					RouteParserDollar[3].expression}}
		}
	case 45:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:338
		{
			RouteParserVAL.expression = &Expression{
				Operation: OP_CALL,
				Args: []*Expression{
					MakeNameExpression(RouteParserDollar[1].token.literal),
					&Expression{
						Operation: OP_LIST,
						Args:      []*Expression{}}}}
		}
	case 46:
		RouteParserDollar = RouteParserS[RouteParserpt-1 : RouteParserpt+1]
//line src/mc/route/parser.go.y:348
		{
			RouteParserVAL.expression = &Expression{
				Operation: OP_STRING,
				Value:     &value.Value{Type: value.VAL_STRING, StringVal: RouteParserDollar[1].token.literal}}
		}
	case 47:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:354
		{
			RouteParserVAL.expression = &Expression{
				Operation: OP_MATCH,
				Args:      []*Expression{RouteParserDollar[1].expression, RouteParserDollar[3].expression}}
		}
	case 48:
		RouteParserDollar = RouteParserS[RouteParserpt-5 : RouteParserpt+1]
//line src/mc/route/parser.go.y:360
		{
			RouteParserVAL.expression = &Expression{
				Operation: OP_TERNARY,
				Args:      []*Expression{RouteParserDollar[1].expression, RouteParserDollar[3].expression, RouteParserDollar[5].expression}}
		}
	case 49:
		RouteParserDollar = RouteParserS[RouteParserpt-2 : RouteParserpt+1]
//line src/mc/route/parser.go.y:366
		{
			RouteParserVAL.expression = &Expression{
				Operation: OP_UMINUS,
				Args:      []*Expression{RouteParserDollar[2].expression}}
		}
	case 50:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:372
		{
			RouteParserVAL.expression = RouteParserDollar[2].expression
		}
	case 51:
		RouteParserDollar = RouteParserS[RouteParserpt-1 : RouteParserpt+1]
//line src/mc/route/parser.go.y:376
		{
			RouteParserVAL.expression = RouteParserDollar[1].expression
		}
	case 52:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:380
		{
			RouteParserVAL.expression = &Expression{
				Operation: OP_EXP,
				Args:      []*Expression{RouteParserDollar[1].expression, RouteParserDollar[3].expression}}
		}
	case 53:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:386
		{
			RouteParserVAL.expression = &Expression{
				Operation: OP_PLUS,
				Args:      []*Expression{RouteParserDollar[1].expression, RouteParserDollar[3].expression}}
		}
	case 54:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:392
		{
			RouteParserVAL.expression = &Expression{
				Operation: OP_MINUS,
				Args:      []*Expression{RouteParserDollar[1].expression, RouteParserDollar[3].expression}}
		}
	case 55:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:398
		{
			RouteParserVAL.expression = &Expression{
				Operation: OP_MUL,
				Args:      []*Expression{RouteParserDollar[1].expression, RouteParserDollar[3].expression}}
		}
	case 56:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:404
		{
			RouteParserVAL.expression = &Expression{
				Operation: OP_DIV,
				Args:      []*Expression{RouteParserDollar[1].expression, RouteParserDollar[3].expression}}
		}
	case 57:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:410
		{
			RouteParserVAL.expression = &Expression{
				Operation: OP_BITWISEAND,
				Args:      []*Expression{RouteParserDollar[1].expression, RouteParserDollar[3].expression}}
		}
	case 58:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:416
		{
			RouteParserVAL.expression = &Expression{
				Operation: OP_BITWISEOR,
				Args:      []*Expression{RouteParserDollar[1].expression, RouteParserDollar[3].expression}}
		}
	case 59:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:422
		{
			RouteParserVAL.expression = &Expression{
				Operation: OP_BITWISEXOR,
				Args:      []*Expression{RouteParserDollar[1].expression, RouteParserDollar[3].expression}}
		}
	case 60:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:428
		{
			RouteParserVAL.expression = &Expression{
				Operation: OP_MOD,
				Args:      []*Expression{RouteParserDollar[1].expression, RouteParserDollar[3].expression}}
		}
	case 61:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:434
		{
			RouteParserVAL.expression = &Expression{
				Operation: OP_EQ,
				Args:      []*Expression{RouteParserDollar[1].expression, RouteParserDollar[3].expression}}
		}
	case 62:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:440
		{
			RouteParserVAL.expression = &Expression{
				Operation: OP_NE,
				Args:      []*Expression{RouteParserDollar[1].expression, RouteParserDollar[3].expression}}
		}
	case 63:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:446
		{
			RouteParserVAL.expression = &Expression{
				Operation: OP_GE,
				Args:      []*Expression{RouteParserDollar[1].expression, RouteParserDollar[3].expression}}
		}
	case 64:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:452
		{
			RouteParserVAL.expression = &Expression{
				Operation: OP_LE,
				Args:      []*Expression{RouteParserDollar[1].expression, RouteParserDollar[3].expression}}
		}
	case 65:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:458
		{
			RouteParserVAL.expression = &Expression{
				Operation: OP_AND,
				Args:      []*Expression{RouteParserDollar[1].expression, RouteParserDollar[3].expression}}
		}
	case 66:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:464
		{
			RouteParserVAL.expression = &Expression{
				Operation: OP_OR,
				Args:      []*Expression{RouteParserDollar[1].expression, RouteParserDollar[3].expression}}
		}
	case 67:
		RouteParserDollar = RouteParserS[RouteParserpt-2 : RouteParserpt+1]
//line src/mc/route/parser.go.y:470
		{
			RouteParserVAL.expression = &Expression{
				Operation: OP_NOT,
				Args:      []*Expression{RouteParserDollar[2].expression}}
		}
	case 68:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:476
		{
			RouteParserVAL.expression = &Expression{
				Operation: OP_GT,
				Args:      []*Expression{RouteParserDollar[1].expression, RouteParserDollar[3].expression}}
		}
	case 69:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:482
		{
			RouteParserVAL.expression = &Expression{
				Operation: OP_LT,
				Args:      []*Expression{RouteParserDollar[1].expression, RouteParserDollar[3].expression}}
		}
	case 70:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:489
		{
			RouteParserVAL.expression = &Expression{
				Operation: OP_MAP,
				Args: []*Expression{
					MakeNameExpression(RouteParserDollar[1].token.literal),
					RouteParserDollar[3].expression}}
		}
	case 71:
		RouteParserDollar = RouteParserS[RouteParserpt-5 : RouteParserpt+1]
//line src/mc/route/parser.go.y:497
		{
			args := []*Expression{
				MakeNameExpression(RouteParserDollar[1].token.literal),
				RouteParserDollar[3].expression}
			RouteParserVAL.expression = &Expression{
				Operation: OP_MAP,
				Args:      append(args, RouteParserDollar[5].expression.Args...)}
		}
	case 72:
		RouteParserDollar = RouteParserS[RouteParserpt-1 : RouteParserpt+1]
//line src/mc/route/parser.go.y:507
		{
			RouteParserVAL.expression = &Expression{
				Operation: OP_LIST,
				Args:      []*Expression{RouteParserDollar[1].expression}}
		}
	case 73:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:513
		{
			args := []*Expression{RouteParserDollar[1].expression}
			RouteParserVAL.expression = &Expression{
				Operation: OP_LIST,
				Args:      append(args, RouteParserDollar[3].expression.Args...)}
		}
	case 74:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:521
		{
			RouteParserVAL.expression = &Expression{
				Operation: OP_MAPVAR,
				Args:      []*Expression{RouteParserDollar[1].expression, MakeNameExpression(RouteParserDollar[3].token.literal)}}
		}
	case 75:
		RouteParserDollar = RouteParserS[RouteParserpt-4 : RouteParserpt+1]
//line src/mc/route/parser.go.y:527
		{
			RouteParserVAL.expression = &Expression{
				Operation: OP_LISTVAR,
				Args:      []*Expression{RouteParserDollar[1].expression, RouteParserDollar[3].expression}}
		}
	case 76:
		RouteParserDollar = RouteParserS[RouteParserpt-1 : RouteParserpt+1]
//line src/mc/route/parser.go.y:533
		{
			RouteParserVAL.expression = MakeVarExpression(RouteParserDollar[1].token.literal)
		}
	case 77:
		RouteParserDollar = RouteParserS[RouteParserpt-1 : RouteParserpt+1]
//line src/mc/route/parser.go.y:538
		{
			RouteParserVAL.writeable = &WriteableValue{
				Base: RouteParserDollar[1].token.literal,
				Path: []PathEntry{}}
		}
	case 78:
		RouteParserDollar = RouteParserS[RouteParserpt-1 : RouteParserpt+1]
//line src/mc/route/parser.go.y:544
		{
			RouteParserVAL.writeable = &WriteableValue{
				Base: "this",
				Path: []PathEntry{}}
		}
	case 79:
		RouteParserDollar = RouteParserS[RouteParserpt-4 : RouteParserpt+1]
//line src/mc/route/parser.go.y:550
		{
			RouteParserDollar[1].writeable.Path = append(RouteParserDollar[1].writeable.Path, PathEntry{Type: PATH_LIST, ListIndex: RouteParserDollar[3].expression})
			RouteParserVAL.writeable = RouteParserDollar[1].writeable
		}
	case 80:
		RouteParserDollar = RouteParserS[RouteParserpt-3 : RouteParserpt+1]
//line src/mc/route/parser.go.y:555
		{
			RouteParserDollar[1].writeable.Path = append(RouteParserDollar[1].writeable.Path, PathEntry{Type: PATH_MAP, MapKey: RouteParserDollar[3].token.literal})
			RouteParserVAL.writeable = RouteParserDollar[1].writeable
		}
	}
	goto RouteParserstack /* stack new state and value */
}
